[
  {
    "objectID": "about.html#current-state",
    "href": "about.html#current-state",
    "title": "Cheongok Jeon",
    "section": "Current State",
    "text": "Current State\nLearning new things all day long."
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "Cheongok Jeon",
    "section": "Contact",
    "text": "Contact\nQuick and Loud - tweet @ me @biogeojeon. Slow but Silent - mail @ me mail"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cheongok Jeon 전청옥",
    "section": "",
    "text": "Want to support my blog? \n\n\n\n\n\n\n\n\n\n   \n     \n     Order By\nDefault\n\n          Title\n        \n\n          Date - Oldest\n        \n\n          Date - Newest\n        \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posetr.html#current-state",
    "href": "posetr.html#current-state",
    "title": "Cheongok Jeon",
    "section": "Current State",
    "text": "Current State\nLearning new things all day long."
  },
  {
    "objectID": "posetr.html#contact",
    "href": "posetr.html#contact",
    "title": "Cheongok Jeon",
    "section": "Contact",
    "text": "Contact\nQuick and Loud - tweet @ me @biogeojeon. Slow but Silent - mail @ me mail"
  },
  {
    "objectID": "static/resources/100-women.html",
    "href": "static/resources/100-women.html",
    "title": "100 Women - BBC",
    "section": "",
    "text": "The BBC has revealed its list of 100 inspiring and influential women from around the world for 2020.\n\n\nThis year 100 Women is highlighting those who are leading change and making a difference during these turbulent times.\nThe list includes Sanna Marin, who leads Finland's all-female coalition government, Michelle Yeoh, star of the new Avatar and Marvel films and Sarah Gilbert, who heads the Oxford University research into a coronavirus vaccine, as well as Jane Fonda, a climate activist and actress.\nAnd in an extraordinary year, when countless women around the world have made a sacrifice to help others, the first place on the list is left open to acknowledge their work and to remember those who have lost their lives while making a difference.\n\n\n\n\n\n\n\n\nThe BBC's 100 Women of 2020\nThough BBC 100 Women cannot name every woman across the globe who has made a contribution, the 'First Spot' missing from the list of 100 is designed to allow you to think of the people who have had an impact on you, over the course of 2020.\n\n\n\n\n\nSource: \nBBC"
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#introduction",
    "href": "static/resources/gt-cookbook-advanced.html#introduction",
    "title": "gt cookbook - advanced",
    "section": "Introduction",
    "text": "Introduction\nThis cookbook attempts to walk through many of the advanced applications for gt, and provide useful commentary around the use of the various gt functions. The full gt documentation has other more succinct examples and full function arguments.\nFor more introductory use cases, make sure to check out the {gt} Cookbook\nMany of these examples rely on some working knowledge of:\n\nHTML\n\nCSS\n\nFunctional Programming\n\n\npurrr and or apply\n\n\nI am a big fan the Mozilla MDN Web Docs for learning more about how to code up the web with front-end developement. They have sections on general reference material, Tutorials, and Developer Guides.\nAs far as functional programming and purrr, I suggest checking out R4DS Functions Chapter, R4DS Iteration chapter, and Advanced R’s Function chapter, and lastly the Learn to purrr guide by Rebecca Barter."
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#custom-css",
    "href": "static/resources/gt-cookbook-advanced.html#custom-css",
    "title": "gt cookbook - advanced",
    "section": "Custom CSS",
    "text": "Custom CSS\nFor more control over styling, you can add custom class names to the table and apply your own CSS. Note that this can require more effort than the built in gt functions, but also allows some things that aren’t possible by the functions align (like hover highlighting!).\n\n exibble %>%\n  dplyr::select(num, currency) %>%\n  gt(id = \"one\") %>% # need to name the table so that you can apply CSS\n  fmt_currency(\n    columns = vars(currency),\n    currency = \"HKD\"\n  ) %>%\n  fmt_scientific(\n    columns = vars(num)\n  ) %>%\n  opt_css(\n    css = \"\n    #one .gt_table {\n      background-color: lightgrey;\n    }\n    #one .gt_row {\n      padding: 20px 30px;\n    }\n    #one tr:hover {\n    background-color: #f5f8ff;\n    }\n    #one .gt_col_heading {\n      text-align: center !important;\n    }\n    \"\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nnum\n      currency\n    \n\n\n1.11 × 10−1\n\nHK$49.95\n\n\n2.22\nHK$17.95\n\n\n3.33 × 101\n\nHK$1.39\n\n\n4.44 × 102\n\nHK$65,100.00\n\n\n5.55 × 103\n\nHK$1,325.81\n\n\nNA\nHK$13.26\n\n\n7.77 × 105\n\nNA\n\n\n8.88 × 106\n\nHK$0.44\n\n\n\n\n\n\nThe examples here embed CSS for demonstration, but it’s often better to put CSS in an external style sheet. You can learn more about adding custom CSS to R Markdown documents here, or to Shiny apps here."
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#parse-arbitrary-html",
    "href": "static/resources/gt-cookbook-advanced.html#parse-arbitrary-html",
    "title": "gt cookbook - advanced",
    "section": "Parse arbitrary HTML",
    "text": "Parse arbitrary HTML\nBecause gt supports HTML, you can also optionally “create” HTML strings prior to passing them into gt proper.\n\ncolor_span <- function(x){paste0(\"<span style='color: \", x, \";'>\", x, \"</span>\")}\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  mutate(color = color_span(color)) %>% \n  mutate(color = purrr::map(color, gt::html)) %>% \n  gt() \n\n\n\n\n\n\ncount\n      weight_g\n      color\n    \n\n\n1\n150.65\ngreen\n\n\n2\n149.65\nyellow\n\n\n3\n171.28\nyellow\n\n\n4\n142.58\ngreen\n\n\n5\n139.04\nyellow\n\n\n\n\n\n\nEmbed URLs\nYou can also use things like htmltools or glue to arbitrarily build HTML content like hyperlinks.\n\nlibrary(htmltools)\nex_sites <- data.frame(\n  Address = c(\"https://google.com\", \"https://yahoo.com\", \"https://duckduckgo.com\"),\n  Site = c(\"Google\", \"Yahoo\", \"DuckDuckGo\")\n)\ngt(ex_sites) %>% \n  text_transform(\n    locations = cells_body(columns = vars(Address)),\n    fn = function(x) {\n    purrr::map(x,  ~htmltools::tags$a(href = .x, target = \"_blank\", .x))\n      }\n  ) %>% \n  text_transform(\n    locations = cells_body(columns = vars(Site)),\n    fn = function(x) {\n    purrr::map2(\n      .x = x, .y = ex_sites$Address, \n      .f = ~glue::glue('<a href=\"{.y}\" target=\"_blank\">{.x}</a>'))\n      }\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nAddress\n      Site\n    \n\n\nhttps://google.com\nGoogle\n\n\nhttps://yahoo.com\nYahoo\n\n\nhttps://duckduckgo.com\nDuckDuckGo\n\n\n\n\n\n\nEmbed data\nWhile gt tables can be beautiful, it’s often best to also include the raw data for download. You can see how to do this with Markdown or HTML thanks to Bob Rudis’ example.\n\nwrite.csv2(mtcars, \"./file.csv\")\n\nencoded <- readLines(\"./file.csv\") %>% \n  paste0(collapse=\"\\n\") %>% \n  openssl::base64_encode() -> encoded\n\nThe raw markdown could be embedded in a Shiny app or RMarkdown document as seen below.\n[Download CSV](data:text/csv;base64,IiI7Im1wZyI7ImN5bCI7ImRpc3AiOyJocCI7ImRyYXQiOyJ3dCI7InFzZWMiOyJ2cyI7ImFtIjsiZ2VhciI7ImNhcmIiCiJNYXpkYSBSWDQiOzIxOzY7MTYwOzExMDszLDk7Miw2MjsxNiw0NjswOzE7NDs0CiJNYXpkYSBSWDQgV2FnIjsyMTs2OzE2MDsxMTA7Myw5OzIsODc1OzE3LDAyOzA7MTs0OzQKIkRhdHN1biA3MTAiOzIyLDg7NDsxMDg7OTM7Myw4NTsyLDMyOzE4LDYxOzE7MTs0OzEKIkhvcm5ldCA0IERyaXZlIjsyMSw0OzY7MjU4OzExMDszLDA4OzMsMjE1OzE5LDQ0OzE7MDszOzEKIkhvcm5ldCBTcG9ydGFib3V0IjsxOCw3Ozg7MzYwOzE3NTszLDE1OzMsNDQ7MTcsMDI7MDswOzM7MgoiVmFsaWFudCI7MTgsMTs2OzIyNTsxMDU7Miw3NjszLDQ2OzIwLDIyOzE7MDszOzEKIkR1c3RlciAzNjAiOzE0LDM7ODszNjA7MjQ1OzMsMjE7Myw1NzsxNSw4NDswOzA7Mzs0CiJNZXJjIDI0MEQiOzI0LDQ7NDsxNDYsNzs2MjszLDY5OzMsMTk7MjA7MTswOzQ7MgoiTWVyYyAyMzAiOzIyLDg7NDsxNDAsODs5NTszLDkyOzMsMTU7MjIsOTsxOzA7NDsyCiJNZXJjIDI4MCI7MTksMjs2OzE2Nyw2OzEyMzszLDkyOzMsNDQ7MTgsMzsxOzA7NDs0CiJNZXJjIDI4MEMiOzE3LDg7NjsxNjcsNjsxMjM7Myw5MjszLDQ0OzE4LDk7MTswOzQ7NAoiTWVyYyA0NTBTRSI7MTYsNDs4OzI3NSw4OzE4MDszLDA3OzQsMDc7MTcsNDswOzA7MzszCiJNZXJjIDQ1MFNMIjsxNywzOzg7Mjc1LDg7MTgwOzMsMDc7Myw3MzsxNyw2OzA7MDszOzMKIk1lcmMgNDUwU0xDIjsxNSwyOzg7Mjc1LDg7MTgwOzMsMDc7Myw3ODsxODswOzA7MzszCiJDYWRpbGxhYyBGbGVldHdvb2QiOzEwLDQ7ODs0NzI7MjA1OzIsOTM7NSwyNTsxNyw5ODswOzA7Mzs0CiJMaW5jb2xuIENvbnRpbmVudGFsIjsxMCw0Ozg7NDYwOzIxNTszOzUsNDI0OzE3LDgyOzA7MDszOzQKIkNocnlzbGVyIEltcGVyaWFsIjsxNCw3Ozg7NDQwOzIzMDszLDIzOzUsMzQ1OzE3LDQyOzA7MDszOzQKIkZpYXQgMTI4IjszMiw0OzQ7NzgsNzs2Njs0LDA4OzIsMjsxOSw0NzsxOzE7NDsxCiJIb25kYSBDaXZpYyI7MzAsNDs0Ozc1LDc7NTI7NCw5MzsxLDYxNTsxOCw1MjsxOzE7NDsyCiJUb3lvdGEgQ29yb2xsYSI7MzMsOTs0OzcxLDE7NjU7NCwyMjsxLDgzNTsxOSw5OzE7MTs0OzEKIlRveW90YSBDb3JvbmEiOzIxLDU7NDsxMjAsMTs5NzszLDc7Miw0NjU7MjAsMDE7MTswOzM7MQoiRG9kZ2UgQ2hhbGxlbmdlciI7MTUsNTs4OzMxODsxNTA7Miw3NjszLDUyOzE2LDg3OzA7MDszOzIKIkFNQyBKYXZlbGluIjsxNSwyOzg7MzA0OzE1MDszLDE1OzMsNDM1OzE3LDM7MDswOzM7MgoiQ2FtYXJvIFoyOCI7MTMsMzs4OzM1MDsyNDU7Myw3MzszLDg0OzE1LDQxOzA7MDszOzQKIlBvbnRpYWMgRmlyZWJpcmQiOzE5LDI7ODs0MDA7MTc1OzMsMDg7Myw4NDU7MTcsMDU7MDswOzM7MgoiRmlhdCBYMS05IjsyNywzOzQ7Nzk7NjY7NCwwODsxLDkzNTsxOCw5OzE7MTs0OzEKIlBvcnNjaGUgOTE0LTIiOzI2OzQ7MTIwLDM7OTE7NCw0MzsyLDE0OzE2LDc7MDsxOzU7MgoiTG90dXMgRXVyb3BhIjszMCw0OzQ7OTUsMTsxMTM7Myw3NzsxLDUxMzsxNiw5OzE7MTs1OzIKIkZvcmQgUGFudGVyYSBMIjsxNSw4Ozg7MzUxOzI2NDs0LDIyOzMsMTc7MTQsNTswOzE7NTs0CiJGZXJyYXJpIERpbm8iOzE5LDc7NjsxNDU7MTc1OzMsNjI7Miw3NzsxNSw1OzA7MTs1OzYKIk1hc2VyYXRpIEJvcmEiOzE1Ozg7MzAxOzMzNTszLDU0OzMsNTc7MTQsNjswOzE7NTs4CiJWb2x2byAxNDJFIjsyMSw0OzQ7MTIxOzEwOTs0LDExOzIsNzg7MTgsNjsxOzE7NDsy)\nOr you can embed it as HTML using the html_csv object as seen above/below.\n\nhtml_encode <- sprintf('data:text/csv;base64,%s', encoded)\nhtml_csv <- glue::glue(\n  \"<a download='mtcars.csv' href='{html_encode}'>CSV Download</a>\"\n  )\n\nhead(mtcars) %>% \n  gt() %>% \n  tab_source_note(html(html_csv))\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\nCSV Download\n    \n\n\n\n\n\nYou can make this process a bit easier with the downloadthis R package. It supports csv, Excel and even .rds files! It also takes care of the “download button”, and supports Bootstrap button styles. H/t to Kyle Cuilla for the suggestion and Jonathan Regenstein for the ask of how to do this.\n\nlibrary(downloadthis)\n\nhead(mtcars) %>%\n  gt() %>%\n  tab_source_note(\n    mtcars %>%\n      download_this(\n        output_name = \"mtcars\",\n        output_extension = \".csv\", # CSV output\n        button_label = \"Download csv\",\n        button_type = \"default\",\n      )\n  )\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n   Download csv\n\n    \n\n\n\n\n\nYou can specify the file/output extension, and the button type to alter the appearance. Note that the code works inline as seen above, or defined in an external object as seen below.\n\nattach_excel <- mtcars %>%\n  download_this(\n    output_name = \"mtcars\",\n    output_extension = \".xlsx\", # Excel file type\n    button_label = \"Download Excel\",\n    button_type = \"primary\", # change button type\n  )\n\nhead(mtcars) %>%\n  gt() %>%\n  tab_source_note(attach_excel)\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n   Download Excel\n\n    \n\n\n\n\n\nYou can continue and go one step farther by adding custom styling CSS to the table to affect the button style.\n\nattach_excel <- mtcars %>%\n  download_this(\n    output_name = \"mtcars\",\n    output_extension = \".xlsx\", # Excel file type\n    button_label = \"Download Excel\",\n    class = \"buttonExcel\"\n  )\n\nhead(mtcars) %>%\n  gt() %>%\n  opt_css(\n    css = \"\n    .buttonExcel{\n    font-size: 12px;\n    color: #fff;\n    background-color: black;\n    border-color: black;\n    font-weight: bold;\n    border-radius: 10px;\n    padding: 4px;\n    }\n    \n    .buttonExcel:hover,\n    .buttonExcel:active,\n    .buttonExcel:focus,\n    .buttonExcel.active {\n    background: grey;\n    color: #ffffff;\n    border-color: grey;\n    }\n    \"\n  ) %>% \n  tab_source_note(attach_excel)\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n   Download Excel\n\n    \n\n\n\n\nCombine and stack\nCombine text into div containers and then “stack” the text on top of each other with alternating color.\n\nstack_function <- function(x){\n  \n  name <- sub(x = x, pattern = \" .*$\", replacement = \"\")\n  model <- sub(x = x, pattern = \".*? \", replacement = \"\")\n\n  \n  glue::glue(\n    \"<div style='line-height:10px'>\n    <span style='font-weight:bold;font-variant:small-caps;font-size:14px'>\n    {name}</div>\n    <div style='line-height:12px'>\n    <span style ='font-weight:bold;color:grey;font-size:10px'>\n    {model}</span></div>\"\n  )\n    }\n\nhead(gtcars) %>% \n  dplyr::select(mfr, model, year, trim, hp) %>%\n  gt() %>% \n  cols_merge(\n    columns = vars(mfr, model)\n  ) %>% \n  text_transform(\n    locations = cells_body(\n      columns = vars(mfr)\n    ),\n    fn = stack_function\n  ) %>% \n  tab_options(\n    data_row.padding = px(5),\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmfr\n      year\n      trim\n      hp\n    \n\n\n\n\n\nFord\n\n\n\nGT\n\n\n2017\nBase Coupe\n647\n\n\n\n\n\nFerrari\n\n\n\n458 Speciale\n\n\n2015\nBase Coupe\n597\n\n\n\n\n\nFerrari\n\n\n\n458 Spider\n\n\n2015\nBase\n562\n\n\n\n\n\nFerrari\n\n\n\n458 Italia\n\n\n2014\nBase Coupe\n562\n\n\n\n\n\nFerrari\n\n\n\n488 GTB\n\n\n2016\nBase Coupe\n661\n\n\n\n\n\nFerrari\n\n\n\nCalifornia\n\n\n2015\nBase Convertible\n553\n\n\n\n\n\n\nAlign symbol on first row only\nWe can align text on the first row only even with a suffix (ie symbol at the end). This can be done with just gt, but it’s a bit verbose.\nThis example applies a percent label to the hp_pct column and properly maintains the decimal place alignment.\n\nhead(gtcars) %>%\n  mutate(hp_pct = (hp/max(hp) * 100)) %>% \n  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%\n  gt() %>%\n  # use a mono-spaced font\n  tab_style(\n    style = cell_text(font = google_font(\"Fira Mono\")),\n    locations = cells_body(columns = vars(hp_pct))\n    ) %>% \n  # align the column of interst to right\n  cols_align(align = \"right\", columns = vars(hp_pct)) %>% \n  # round and transform the first row to percent\n  text_transform(\n    locations = cells_body(vars(hp_pct), rows = 1),\n    fn = function(x){ \n      fmt_val <- format(as.double(x), nsmall = 1, digits = 1)\n      paste0(fmt_val, \"%\") %>% gt::html()}\n  ) %>% \n  text_transform(\n    locations = cells_body(vars(hp_pct), rows = 2:6),\n    fn = function(x){ \n      # round remaining rows, add a non-breaking space\n     fmt_val <- format(as.double(x), nsmall = 1, digits = 1)\n     lapply(fmt_val, function(x) paste0(x, '&nbsp') %>% gt::html())\n  })\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmfr\n      model\n      year\n      trim\n      hp\n      hp_pct\n    \n\n\nFord\nGT\n2017\nBase Coupe\n647\n97.9%\n\n\nFerrari\n458 Speciale\n2015\nBase Coupe\n597\n 90.3&nbsp\n\n\nFerrari\n458 Spider\n2015\nBase\n562\n 85.0&nbsp\n\n\nFerrari\n458 Italia\n2014\nBase Coupe\n562\n 85.0&nbsp\n\n\nFerrari\n488 GTB\n2016\nBase Coupe\n661\n100.0&nbsp\n\n\nFerrari\nCalifornia\n2015\nBase Convertible\n553\n 83.7&nbsp\n\n\n\n\n\n\nWe can do the same thing with a custom gt function that we’ll call fmt_symbol_first().\n\nfmt_symbol_first <- function(\n  gt_data,\n  column = NULL,        # column of interest to apply to\n  symbol = NULL,        # symbol to add, optionally\n  suffix = \"\",          # suffix to add, optionally\n  decimals = NULL,      # number of decimal places to round to\n  last_row_n,           # what's the last row in data?\n  symbol_first = FALSE  # symbol before or after suffix?\n) {\n  \n  # Test and error out if mandatory columns are missing\n  stopifnot(\"`symbol_first` argument must be a logical\" = is.logical(symbol_first))\n  stopifnot(\"`last_row_n` argument must be specified and numeric\" = is.numeric(last_row_n))\n  stopifnot(\"Input must be a gt table\" = class(gt_data)[[1]] == \"gt_tbl\")\n\n  # needs to type convert to double to play nicely with decimals and rounding\n  # as it's converted to character by gt::text_transform\n  add_to_first <- function(x, suff = suffix, symb = symbol) {\n    if (!is.null(decimals)) {\n      x <- suppressWarnings(as.double(x))\n      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)\n    } else {\n      fmt_val <- x\n    }\n\n    # combine the value, passed suffix, symbol -> html\n    if (isTRUE(symbol_first)) {\n      paste0(fmt_val, symb, suff) %>% gt::html()\n    } else {\n      paste0(fmt_val, suff, symb) %>% gt::html()\n    }\n  }\n\n  # repeat non-breaking space for combined length of suffix + symbol\n  # logic is based on is a NULL passed or not\n  if (!is.null(symbol) | !identical(as.character(symbol), character(0))) {\n    suffix <- ifelse(identical(as.character(suffix), character(0)), \"\", suffix)\n    length_nbsp <- c(\"&nbsp\", rep(\"&nbsp\", nchar(suffix))) %>%\n      paste0(collapse = \"\")\n  } else {\n    suffix <- ifelse(identical(as.character(suffix), character(0)), \"\", suffix)\n    length_nbsp <- rep(\"&nbsp\", nchar(suffix)) %>%\n      paste0(collapse = \"\")\n  }\n\n  # affect rows OTHER than the first row\n  add_to_remainder <- function(x, length = length_nbsp) {\n    if (!is.null(decimals)) {\n      # if decimal not null, convert to double\n      x <- suppressWarnings(as.double(x))\n      # then round and format ALL to force specific decimals\n      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)\n    } else {\n      fmt_val <- x\n    }\n    paste0(fmt_val, length) %>% lapply(FUN = gt::html)\n  }\n\n  # pass gt object\n  # align right to make sure the spacing is meaningful\n  gt_data %>%\n    cols_align(align = \"right\", columns = vars({{ column }})) %>%\n    # convert to mono-font for column of interest\n    tab_style(\n      style = cell_text(font = google_font(\"Fira Mono\")),\n      locations = cells_body(columns = vars({{ column }}))\n    ) %>%\n    # transform first rows\n    text_transform(\n      locations = cells_body(vars({{ column }}), rows = 1),\n      fn = add_to_first\n    ) %>%\n    # transform remaining rows\n    text_transform(\n      locations = cells_body(vars({{ column }}), rows = 2:last_row_n),\n      fn = add_to_remainder\n    )\n}\n\nApply the custom function.\nWe can then use the function as a one-liner, and format just that column of interest.\n\nhead(gtcars) %>%\n  mutate(hp_pct = (hp/max(hp) * 100)) %>% \n  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%\n  gt() %>% \n  opt_table_lines() %>% \n  fmt_symbol_first(column = hp_pct, decimals = 1, suffix = \"%\", last_row_n = 6)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmfr\n      model\n      year\n      trim\n      hp\n      hp_pct\n    \n\n\nFord\nGT\n2017\nBase Coupe\n647\n97.9%\n\n\nFerrari\n458 Speciale\n2015\nBase Coupe\n597\n 90.3&nbsp\n\n\nFerrari\n458 Spider\n2015\nBase\n562\n 85.0&nbsp\n\n\nFerrari\n458 Italia\n2014\nBase Coupe\n562\n 85.0&nbsp\n\n\nFerrari\n488 GTB\n2016\nBase Coupe\n661\n100.0&nbsp\n\n\nFerrari\nCalifornia\n2015\nBase Convertible\n553\n 83.7&nbsp\n\n\n\n\n\n\nSparkline plots\nWe can embed sparkline plots with some help from the kableExtra package.\n\nmtcars %>%\n  group_by(cyl) %>%\n  summarize(mpg_data = list(mpg), .groups = \"drop\") %>%\n  gt() %>%\n  text_transform(\n    locations = cells_body(columns = vars(mpg_data)),\n    fn = function(x) {\n      data_in <- purrr::pluck(., \"_data\", \"mpg_data\")\n      plot <- purrr::map(\n        data_in, ~ kableExtra::spec_plot(\n          .x, ylim = range(mtcars$mpg), \n          same_lim = TRUE, width = 300, height = 70\n          )\n        )\n      \n      plot <- purrr::map_chr(plot, \"svg_text\")\n    }\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncyl\n      mpg_data\n    \n\n\n4\n\n\n\n\n\n6\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\nCreate a function\nWe can alternatively write a function to do something similar.\n\ngt_plot <- function(table_data, plot_col, data_col, plot_fun, ...){\n  # save the data extract ahead of time \n  # to be used in our anonymous function below\n  data_in = purrr::pluck(table_data, \"_data\", data_col)\n\n  text_transform(\n    table_data,\n    # note the use of {{}} here - this is tidy eval\n    # that allows you to indicate specific columns\n    locations = cells_body(columns = vars({{plot_col}})),\n    fn = function(x){\n      plot <- purrr::map(data_in, plot_fun, width = 300, height = 70, same_lim = FALSE, ...)\n      plot_svg <- purrr::map(plot, \"svg_text\")\n      purrr::map(plot_svg, gt::html)\n    }\n  )\n}\n\nAnd then we can use that function!\n\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(mpg_data = list(mpg), .groups = \"drop\") %>% \n  gt() %>% \n  # note you can leave mpg_data unquoted for the tidyeval\n  # but have to quote mpg_data for the pluck\n  gt_plot(mpg_data, \"mpg_data\", plot_fun = kableExtra::spec_plot)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncyl\n      mpg_data\n    \n\n\n4\n\n\n\n\n\n6\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\nInteractive sparklines\nWe can use the sparkline package to embed interactive sparklines.\n\ngt_spark <- function(table_data, plot_col, data_col){\n  # save the data extract ahead of time \n  # to be used in our anonymous function below\n  data_in = purrr::pluck(table_data, \"_data\", data_col)\n  \n  text_transform(\n    table_data,\n    # note the use of {{}} here - this is tidy eval\n    # that allows you to indicate specific columns\n    locations = cells_body(columns = vars({{plot_col}})),\n    fn = function(x){\n      sparkline_plot <- purrr::map(\n        data_in, \n        ~sparkline::spk_chr(values = .x, chartRangeMin = 0)\n        )\n      \n      purrr::map(sparkline_plot, gt::html)\n    }\n  )\n}\n\nWe can then apply the function to work very succinctly, referencing only the internal list-column data.\n\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(mpg_data = list(mpg), .groups = \"drop\") %>% \n  gt() %>% \n  # note you can leave mpg_data unquoted for the tidyeval\n  # but have to quote mpg_data for the pluck\n  gt_spark(mpg_data, \"mpg_data\")\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncyl\n      mpg_data\n    \n\n\n4\n\n\n\n\n\n\n6\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n\n\nTooltips\nTooltips can be added with HTML tags.\n\nlibrary(htmltools)\n\n#    \n# Add tooltip to column labels\nwith_tooltip <- function(value, tooltip) {\n  tags$abbr(\n    style = \"text-decoration: underline;\n    text-decoration-style: solid; color: blue\",\n    title = tooltip,\n    value\n  ) %>% \n    as.character()\n}\n\nmtcars %>% \n  head() %>% \n  tibble::rownames_to_column() %>% \n  select(rowname, mpg:hp) %>% \n  gt() %>% \n   cols_label(\n    mpg = gt::html(with_tooltip(\"MPG\", \"Miles per Gallon\")),\n    cyl = gt::html(with_tooltip(\"CYL\", \"Number of Cylinders\")),\n    disp = gt::html(with_tooltip(\"DISP\", \"Displacement\")),\n    hp = gt::html(with_tooltip(\"HP\", \"Horsepower\")),\n  )\n\n\n\n\n\n\n\n      MPG\n      CYL\n      DISP\n      HP\n    \n\n\nMazda RX4\n21.0\n6\n160\n110\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n\n\nDatsun 710\n22.8\n4\n108\n93\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n\n\nValiant\n18.1\n6\n225\n105\n\n\n\n\n\n\nAdd icons\nYou can add arbitrary icons with the fontawesome R package.\n\nmtcars %>% \n  head() %>% \n  gt() %>% \n  text_transform(\n    locations = cells_body(columns = vars(cyl), rows = cyl == 4),\n    fn = function(x){gt::html(fontawesome::fa(\"truck-pickup\", fill = \"blue\"))}\n  ) %>% \n  text_transform(\n    locations = cells_body(columns = vars(cyl), rows = cyl == 6),\n    fn = function(x){gt::html(fontawesome::fa(\"truck\", fill = \"grey\"))}\n  ) %>% \n  text_transform(\n    locations = cells_body(columns = vars(cyl), rows = cyl == 8),\n    fn = function(x){gt::html(fontawesome::fa(\"truck-monster\", fill = \"red\"))}\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nAdd rating stars\nYou can take the icons example a step further, and assign rating stars. For this example, we’re creating HTML content in the data itself, before passing it into gt. This example adapted from reactable.\n\n# note you could use ANY font-awesome logo\n# https://fontawesome.com/cheatsheet\nrating_stars <- function(rating, max_rating = 5) {\n  rounded_rating <- floor(rating + 0.5)  # always round up\n  stars <- lapply(seq_len(max_rating), function(i) {\n    if (i <= rounded_rating) fontawesome::fa(\"star\", fill= \"orange\") else fontawesome::fa(\"star\", fill= \"grey\")\n  })\n  label <- sprintf(\"%s out of %s\", rating, max_rating)\n  div_out <- htmltools::div(title = label, \"aria-label\" = label, role = \"img\", stars)\n  \n  as.character(div_out) %>% \n    gt::html()\n}\n\nmtcars %>% \n  slice(1:5) %>% \n  mutate(rating = purrr::map(sample(1:5, size = 5, TRUE), rating_stars)) %>% \n  gt()\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      rating\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n  \n\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n  \n\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n  \n\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n  \n\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n  \n\n\n\n\n\n\n\nTags and badges\nAgain we can create a custom function and use purrr::map() to generate the HTML code before passing it into gt. Example adapted from reactable documentation.\n\nadd_cyl_color <- function(cyl){\n      add_color <- if (cyl == 4) {\n        \"background: hsl(116, 60%, 90%); color: hsl(116, 30%, 25%);\"\n      } else if (cyl == 6) {\n        \"background: hsl(230, 70%, 90%); color: hsl(230, 45%, 30%);\"\n      } else if (cyl == 8) {\n        \"background: hsl(350, 70%, 90%); color: hsl(350, 45%, 30%);\"\n      }\n      div_out <- htmltools::div(\n        style = paste(\n          \"display: inline-block; padding: 2px 12px; border-radius: 15px; font-weight: 600; font-size: 12px;\",\n          add_color\n          ),\n        paste(cyl, \"Cylinders\")\n      )\n      \n      as.character(div_out) %>% \n        gt::html()\n}\n\nmtcars %>% \n  head() %>% \n  mutate(cylinder = purrr::map(cyl, add_cyl_color)) %>% \n  gt()\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n      cylinder\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n6 Cylinders\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n6 Cylinders\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n4 Cylinders\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n6 Cylinders\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n8 Cylinders\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n6 Cylinders\n\n\n\n\n\n\nBadges\nWe can also use badges in a similar way.\n\n\n\n\nadd_badge <- function(x){\n      add_color <- if (x == \"Paid\") {\n        \"background: hsl(116, 60%, 90%); color: hsl(116, 30%, 25%);\"\n      } else if (x == \"Pending\") {\n        \"background: hsl(230, 70%, 90%); color: hsl(230, 45%, 30%);\"\n      } else if (x == \"Canceled\") {\n        \"background: hsl(350, 70%, 90%); color: hsl(350, 45%, 30%);\"\n      }\n      div_out <- htmltools::div(\n        style = paste(\n          \"display: inline-block; padding: 2px 12px; border-radius: 15px; font-weight: 600; font-size: 12px;\",\n          add_color\n          ),\n        x\n      )\n      \n      as.character(div_out) %>% \n        gt::html()\n}\n\n\norders <- data.frame(\n  Order = 2300:2304,\n  Created = seq(as.Date(\"2019-04-01\"), by = \"day\", length.out = 5),\n  Customer = sample(rownames(MASS::painters), 5),\n  Status = sample(c(\"Pending\", \"Paid\", \"Canceled\"), 5, replace = TRUE)\n) %>% \n  mutate(Status = purrr::map(Status, add_badge))\n\norders %>% \n  gt()\n\n\n\n\n\n\nOrder\n      Created\n      Customer\n      Status\n    \n\n\n2300\n2019-04-01\nLanfranco\nPaid\n\n\n2301\n2019-04-02\nVan Leyden\nPaid\n\n\n2302\n2019-04-03\nDa Vinci\nPending\n\n\n2303\n2019-04-04\nCaravaggio\nCanceled\n\n\n2304\n2019-04-05\nPordenone\nCanceled\n\n\n\n\n\n\nExpandable sections\nYou can embed expandable sections with <details> HTML, and we can build up some contents of the details tag with the use of htmltools.\n\nlibrary(htmltools)\n\nsource_details <- paste0(\n  \"<details>\", \"<summary><strong>Table Key, click to expand</strong></summary>\",\n  div(\"cyl: Cylinders\"), div(\"disp: Displacement\"), div(\"hp: Horsepower\"),\n  \"</details\"\n)\n\nhead(mtcars) %>% \n  gt() %>% \n  tab_source_note(source_note = html(source_details))\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nTable Key, click to expandcyl: Cylinders\ndisp: Displacement\nhp: Horsepower\n\n\n\n\nBar charts\nThere are different ways to create bar charts, but the example below is adapted from the reactable documentation. The original source on CSS bars using HTML and CSS.\n\nbar_chart <- function(label, height = \"16px\", fill = \"#00bfc4\", background = \"white\") {\n  bar <- glue::glue(\n    \"<div style='background:{fill};width:{label}%;height:{height};'></div>\"\n    )\n  chart <- glue::glue(\n    \"<div style='flex-grow:1;margin-left:8px;background:{background};'>{bar}</div>\"\n  )\n  glue::glue(\n    \"<div style='display:flex;align-items:left';>{chart}</div>\"\n    ) %>%\n  gt::html()\n  \n}\n\nmtcars %>% \n  head() %>% \n  mutate(\n    mpg_val = mpg/max(mpg) * 100,\n    mpg_plot = purrr::map(mpg_val, ~bar_chart(label = .x)),\n    mpg_plot2 = purrr::map(\n      mpg_val, \n      ~bar_chart(label = .x, fill = \"#fc5185\", background = \"#e1e1e1\")\n      ),\n    ) %>% \n  select(cyl, hp, disp, mpg, mpg_plot, mpg_plot2) %>% \n  gt() %>% \n  cols_align(align = \"left\", columns = vars(mpg_plot)) \n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncyl\n      hp\n      disp\n      mpg\n      mpg_plot\n      mpg_plot2\n    \n\n\n6\n110\n160\n21.0\n\n\n\n\n6\n110\n160\n21.0\n\n\n\n\n4\n93\n108\n22.8\n\n\n\n\n6\n110\n258\n21.4\n\n\n\n\n8\n175\n360\n18.7\n\n\n\n\n6\n105\n225\n18.1\n\n\n\n\n\n\n\n\nEmbed images\nThe function provides a convenient way to generate an HTML fragment with an image URL. Because this function is currently HTML-based, it is only useful for HTML table output. To use this function inside of data cells, it is recommended that the text_transform() function is used.\n\nr_png_url <- \"https://www.r-project.org/logo/Rlogo.png\"\n\ndplyr::tibble(\n    pixels = px(seq(10, 20, 5)),\n    image = seq(10, 20, 5)\n  ) %>%\n  gt() %>%\n  text_transform(\n    locations = cells_body(vars(image)),\n    fn = function(x) {\n      web_image(\n        url = r_png_url,\n        height = as.numeric(x)\n      )\n    }\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\npixels\n      image\n    \n\n\n10px\n\n\n\n15px\n\n\n\n20px\n\n\n\n\n\n\n\nMore images\nYou can include multiple images by parsing the url along with purrr::map() or lapply()\n\ntibble::tribble(\n  ~team_abb, ~headshot_href,      ~short_name, ~qbr_total, ~qb_plays,\n       \"GB\",    \"8439.png\",     \"A. Rodgers\",       84.4,       608,\n       \"KC\", \"3139477.png\",     \"P. Mahomes\",       82.9,       710,\n      \"BUF\", \"3918298.png\",       \"J. Allen\",       81.7,       729,\n      \"TEN\",   \"14876.png\",   \"R. Tannehill\",       78.3,       594\n  ) %>% \n  mutate(\n    headshot_href = paste0(\n      \"https://a.espncdn.com/i/headshots/nfl/players/full/\", headshot_href\n      )\n    ) %>% \n  gt() %>%\n  text_transform(\n    locations = cells_body(vars(headshot_href)),\n    fn = function(x) {purrr::map(x,~ web_image(url = .x, height = 30))}\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nteam_abb\n      headshot_href\n      short_name\n      qbr_total\n      qb_plays\n    \n\n\nGB\n\nA. Rodgers\n84.4\n608\n\n\nKC\n\nP. Mahomes\n82.9\n710\n\n\nBUF\n\nJ. Allen\n81.7\n729\n\n\nTEN\n\nR. Tannehill\n78.3\n594"
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#gt-functions",
    "href": "static/resources/gt-cookbook-advanced.html#gt-functions",
    "title": "gt cookbook - advanced",
    "section": "\ngt functions",
    "text": "gt functions\nThis section assumes that you become familiar with the {{ var }} syntax, known as “embrace” or “curly curly”. This allows the tidy-evaluation of bare names. A brief example below with a custom function.\n\nex_function <- function(column){\n  mtcars %>% \n    # provide the embrace around the variable name\n    # and it can be parsed by tidy-eval\n    group_by({{ column }}) %>% \n    summarize(mean = mean(mpg)) %>% \n    ungroup()\n}\n\nex_function(cyl)\n\n# A tibble: 3 × 2\n    cyl  mean\n  <dbl> <dbl>\n1     4  26.7\n2     6  19.7\n3     8  15.1\n\n\nWhile that example shows the usage of {{ var }}, you can also read a bit more in the rlang docs.\nBasic functions\nYou can create repeatable functions with a specific purpose relatively easily with gt.\n\ncar_table <- function(grouping){\n  mtcars %>% \n    head() %>% \n    gt(groupname_col = grouping) %>% \n    opt_row_striping() %>% \n    tab_options(\n      data_row.padding = px(4)\n    ) %>% \n    tab_style(\n      style = list(\n        cell_fill(color = \"black\"),\n        cell_text(color = \"white\", weight = \"bold\")\n      ),\n      locations = cells_row_groups()\n    )\n}\n\ncar_table(\"am\")\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      gear\n      carb\n    \n\n\n1\n    \n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n4\n1\n\n\n0\n    \n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n3\n1\n\n\n\n\n\n\n\nThese can be even useful with datasets that are similar in structure (ie same columns), but change week to week, for example reports.\n\ncar_table <- function(data_in){\n  # provide data_in as an argument, so that the table is similar\n  # but the data itself can change\n  data_in %>% \n    gt(groupname_col = \"cyl\") %>% \n    opt_row_striping() %>% \n    tab_options(\n      data_row.padding = px(4)\n    ) %>% \n    tab_style(\n      style = list(\n        cell_fill(color = \"black\"),\n        cell_text(color = \"white\", weight = \"bold\")\n      ),\n      locations = cells_row_groups()\n    )\n}\n\nmtcars %>% \n  slice_sample(n = 12) %>% \n  car_table()\n\n\n\n\n\n\nmpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6\n    \n\n21.0\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n19.7\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\n8\n    \n\n15.0\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\n10.4\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n\n\n15.8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\n19.2\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\n14.7\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n\n\n4\n    \n\n30.4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n26.0\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\n30.4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2"
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#create-a-theme",
    "href": "static/resources/gt-cookbook-advanced.html#create-a-theme",
    "title": "gt cookbook - advanced",
    "section": "Create a theme",
    "text": "Create a theme\nCreating a theme is similar to a normal function and can be done by passing in a gt object, and setting some parameters in various gt functions. Here we define a basic theme.\n\nmy_gt_theme <- function(data, ...) {\n  data %>%\n    tab_options(\n      table.background.color = \"black\",\n      column_labels.background.color = \"grey\",\n      column_labels.font.size = px(16),\n      table.font.size = px(12),\n      data_row.padding = px(4),\n      ...\n    )\n}\n\nAnd we can then apply that theme. Note that the theme is intentionally relative garish but we can see that we turned some of the arguments into a one-liner.\n\nhead(gtcars) %>% \n  gt() %>% \n  my_gt_theme(table.font.color.light = \"lightgreen\")\n\n\n\n\n\n\nmfr\n      model\n      year\n      trim\n      bdy_style\n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n      mpg_h\n      drivetrain\n      trsmn\n      ctry_origin\n      msrp\n    \n\n\nFord\nGT\n2017\nBase Coupe\ncoupe\n647\n6250\n550\n5900\n11\n18\nrwd\n7a\nUnited States\n447000\n\n\nFerrari\n458 Speciale\n2015\nBase Coupe\ncoupe\n597\n9000\n398\n6000\n13\n17\nrwd\n7a\nItaly\n291744\n\n\nFerrari\n458 Spider\n2015\nBase\nconvertible\n562\n9000\n398\n6000\n13\n17\nrwd\n7a\nItaly\n263553\n\n\nFerrari\n458 Italia\n2014\nBase Coupe\ncoupe\n562\n9000\n398\n6000\n13\n17\nrwd\n7a\nItaly\n233509\n\n\nFerrari\n488 GTB\n2016\nBase Coupe\ncoupe\n661\n8000\n561\n3000\n15\n22\nrwd\n7a\nItaly\n245400\n\n\nFerrari\nCalifornia\n2015\nBase Convertible\nconvertible\n553\n7500\n557\n4750\n16\n23\nrwd\n7a\nItaly\n198973\n\n\n\n\n\n\nExample Theme\nA “prettier” theme based off an ESPN table style.\n\ngt_theme_espn <- function(data, ...){\n  data %>% \n    opt_all_caps()  %>%\n    opt_table_font(\n      font = list(\n        google_font(\"Lato\"),\n        default_fonts()\n      )\n    )  %>% \n    opt_row_striping() %>% \n    tab_options(\n      row.striping.background_color = \"#fafafa\",\n      table_body.hlines.color = \"#f6f7f7\",\n      source_notes.font.size = 12,\n      table.font.size = 16,\n      table.width = px(700),\n      heading.align = \"left\",\n      heading.title.font.size = 24,\n      table.border.top.color = \"transparent\",\n      table.border.top.width = px(3),\n      data_row.padding = px(7),\n      ...\n    ) \n}\n\n\nhead(gtcars) %>% \n  dplyr::select(mfr:mpg_c) %>% \n  gt() %>% \n  gt_theme_espn()\n\n\n\n\n\nmfr\n      model\n      year\n      trim\n      bdy_style\n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n    \n\n\nFord\nGT\n2017\nBase Coupe\ncoupe\n647\n6250\n550\n5900\n11\n\n\nFerrari\n458 Speciale\n2015\nBase Coupe\ncoupe\n597\n9000\n398\n6000\n13\n\n\nFerrari\n458 Spider\n2015\nBase\nconvertible\n562\n9000\n398\n6000\n13\n\n\nFerrari\n458 Italia\n2014\nBase Coupe\ncoupe\n562\n9000\n398\n6000\n13\n\n\nFerrari\n488 GTB\n2016\nBase Coupe\ncoupe\n661\n8000\n561\n3000\n15\n\n\nFerrari\nCalifornia\n2015\nBase Convertible\nconvertible\n553\n7500\n557\n4750\n16\n\n\n\n\nFiveThirtyEight Theme\nMy favorite tables come from FiveThirtyEight, so here is an example theme that closely follows their style.\n\ngt_theme_538 <- function(data,...) {\n  data %>%\n  opt_all_caps()  %>%\n  opt_table_font(\n    font = list(\n      google_font(\"Chivo\"),\n      default_fonts()\n    )\n  ) %>%\n    tab_style(\n      style = cell_borders(\n        sides = \"bottom\", color = \"transparent\", weight = px(2)\n      ),\n      locations = cells_body(\n        columns = TRUE,\n        # This is a relatively sneaky way of changing the bottom border\n        # Regardless of data size\n        rows = nrow(data$`_data`)\n      )\n    )  %>% \n  tab_options(\n    column_labels.background.color = \"white\",\n    table.border.top.width = px(3),\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    table.border.bottom.width = px(3),\n    column_labels.border.top.width = px(3),\n    column_labels.border.top.color = \"transparent\",\n    column_labels.border.bottom.width = px(3),\n    column_labels.border.bottom.color = \"black\",\n    data_row.padding = px(3),\n    source_notes.font.size = 12,\n    table.font.size = 16,\n    heading.align = \"left\",\n    ...\n  ) \n}\n\n\nhead(gtcars) %>% \n  dplyr::select(mfr:mpg_c) %>% \n  gt() %>% \n  gt_theme_538() \n\nWarning: `columns = TRUE` has been deprecated in gt 0.3.0:\n* please use `columns = everything()` instead\n\n\n\n\nmfr\n      model\n      year\n      trim\n      bdy_style\n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n    \n\n\nFord\nGT\n2017\nBase Coupe\ncoupe\n647\n6250\n550\n5900\n11\n\n\nFerrari\n458 Speciale\n2015\nBase Coupe\ncoupe\n597\n9000\n398\n6000\n13\n\n\nFerrari\n458 Spider\n2015\nBase\nconvertible\n562\n9000\n398\n6000\n13\n\n\nFerrari\n458 Italia\n2014\nBase Coupe\ncoupe\n562\n9000\n398\n6000\n13\n\n\nFerrari\n488 GTB\n2016\nBase Coupe\ncoupe\n661\n8000\n561\n3000\n15\n\n\nFerrari\nCalifornia\n2015\nBase Convertible\nconvertible\n553\n7500\n557\n4750\n16"
  },
  {
    "objectID": "static/resources/gt-cookbook-advanced.html#tidy-eval",
    "href": "static/resources/gt-cookbook-advanced.html#tidy-eval",
    "title": "gt cookbook - advanced",
    "section": "Tidy eval",
    "text": "Tidy eval\nNow, I want to preface this by saying that the entire tidyeval framework used in gt is currently under active development to be more closely aligned with the tidyverse. You’ll note the relatively legacy use of vars() inside gt.\nMost of this is only required for creating your own functions, although there are some sharp edges around specifying columns in vars().\nFor some nice reading about tidyeval beyond the scope of just gt, see:\n\n\nAdvanced R - book\n\nTidyeval - book\n\nTo start off, let’s revisit an example from the cookbook. First we’ll prep the data.\n\ndimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb)\ntemps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames) %>% \n  data.frame() %>% \n  tibble::rownames_to_column() %>% \n  head(10)\n\ntemps %>% \n  tibble()\n\n# A tibble: 10 × 13\n   rowname   Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov\n   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 1920     40.6  40.8  44.4  46.7  54.1  58.5  57.7  56.4  54.3  50.5  42.9\n 2 1921     44.2  39.8  45.1  47    54.1  58.7  66.3  59.9  57    54.2  39.7\n 3 1922     37.5  38.7  39.5  42.1  55.7  57.8  56.8  54.3  54.3  47.1  41.8\n 4 1923     41.8  40.1  42.9  45.8  49.2  52.7  64.2  59.6  54.4  49.2  36.3\n 5 1924     39.3  37.5  38.3  45.5  53.2  57.7  60.8  58.2  56.4  49.8  44.4\n 6 1925     40    40.5  40.8  45.1  53.8  59.4  63.5  61    53    50    38.1\n 7 1926     39.2  43.4  43.4  48.9  50.6  56.8  62.5  62    57.5  46.7  41.6\n 8 1927     39.4  38.5  45.3  47.1  51.7  55    60.4  60.5  54.7  50.3  42.3\n 9 1928     40.8  41.1  42.8  47.3  50.9  56.4  62.2  60.5  55.4  50.2  43  \n10 1929     34.8  31.3  41    43.9  53.1  56.9  62.5  60.3  59.8  49.2  42.9\n# … with 1 more variable: Dec <dbl>\n\n\n\nWe’ll also define our “Hulk palette” as a function.\n\nhulk_pal <- function(x){\n  scales::col_numeric(\n      colorspace::diverge_hcl(n = 9, palette = \"Purple-Green\") %>% rev(), \n      domain = range(nottem)\n      )(x)\n}\n\nThis function supplies a number or a vector of numbers to generate colors.\n\n# January is cold\ntemps$Jan %>% hulk_pal() %>%  scales::show_col()\n\n\n\n\n\n# June is warm\ntemps$Jun %>% hulk_pal() %>%  scales::show_col()\n\n\n\n\nSequence of columns\nYou may typically use something like Jan:Dec to indicate the columns from Jan TO Dec, but this won’t work in vars(). This throws an error Error: Can't convert a call to a string. However we can accomplish similar things through other techniques.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    # note use of sequence\n    columns = vars(Jan:Dec),\n    colors = hulk_pal\n  )\n\n#> Error: Can't convert a call to a string\n\nRaw strings\nYou can pass raw strings into vars(). Since our names of the columns are month abbreviation, we can take advantage of the built in month.abb string.\n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\nWe can compare the code for the below, note the use of month.abb first or manually naming ALL the column names second.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    # note use of month.abb\n    columns = vars(month.abb),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\nNote: Using an external vector in selections is ambiguous.\nℹ Use `all_of(month.abb)` instead of `month.abb` to silence this message.\nℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\nThis message is displayed once per session.\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\n\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(\n      Jan, Feb, Mar, Apr, May, Jun, \n      Jul, Aug, Sep, Oct, Nov, Dec\n      ),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nNumbered\nNow you can skip using vars() and the named column and just supply the column number. This is a great usecase if you have a lot of columns that need to be used and want a low-effort way of indicating.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = 2:13,\n    colors = hulk_pal\n  )\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nNames\nYou can subset the names of the column but without using tidyeval must assign it to an object to use it inside vars().\n\ncols_affect <- names(temps)[2:13]\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(cols_affect),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\nNote: Using an external vector in selections is ambiguous.\nℹ Use `all_of(cols_affect)` instead of `cols_affect` to silence this message.\nℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\nThis message is displayed once per session.\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nNames + !!!\n\nIf you use tidyeval’s bang-bang-bang operator (!!!), then you can parse the R code inside the vars() call.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(!!!names(temps)[2:13]),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nStrings\nYou can pass raw strings to vars() and separate them by commas.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(\"Jan\", \"Feb\"),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nStrings + c()\n\nIF you use a c() you need to use the !!! operator. More details at Advanced R.\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(!!!c(\"Jan\", \"Feb\")),\n    colors = hulk_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nFunctions\nFunctions require some special subsets of tidyeval. There are multiple ways to approach this with the current implementation of tidyeval, although this will hopefully become even more robust over time as the gt team continues to develop the package.\nPass the dots\nFor representing multiple columns at once, you can just “pass the dots” into the function. More details about the dots.\n\ncolor_columns <- function(data_in, ..., palette = hulk_pal) {\n  data_in %>%\n    gt() %>%\n    data_color(\n      columns = vars(...),\n      colors = palette\n    )\n}\n\ncolor_columns(temps, Jan, Feb, Mar, Apr, May, Jun)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nWrapper\nSimilarly, this could just be a wrapper around data_color alone, rather than the full gt pipeline.\n\ndata_color_cols <- function(gt_data, ..., palette = hulk_pal) {\n  gt_data %>%\n    data_color(\n      columns = vars(...),\n      colors = palette\n    )\n}\n\ntemps %>% \n  gt() %>% \n  data_color_cols(Jan, Feb, Mar, Apr, May, Jun)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nFunction + Strings\nIf you’d like to avoid using ... or would prefer strings, you can pass raw strings vars() and use !!! to parse the vector of strings.\n\ndata_color_cols <- function(gt_data, columns, palette = hulk_pal) {\n\n  gt_data %>%\n    data_color(\n      columns = vars(!!!columns),\n      colors = palette\n    )\n}\n\ntemps %>% \n  gt() %>% \n  data_color_cols(columns = c(\"Jan\", \"Feb\", \"Mar\"))\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nEmbrace\nThe embracing operator {{ }} can be used for single columns.\n\ncolor_column <- function(data_in, column, palette = hulk_pal) {\n\n  data_in %>%\n    gt() %>%\n    data_color(\n      columns = vars({{column}}),\n      colors = palette\n    )\n}\n\ncolor_columns(temps, Jun)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nWrapper\nSimilarly, this could just be a wrapper around data_color alone, rather than the full gt pipeline.\n\ndata_color_col <- function(gt_data, column, palette = hulk_pal) {\n\n  gt_data %>%\n    data_color(\n      columns = vars({{column}}),\n      colors = palette\n    )\n}\n\ntemps %>% \n  gt() %>% \n  data_color_col(column = Jun)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#introduction",
    "href": "static/resources/gt-cookbook.html#introduction",
    "title": "gt cookbook",
    "section": "Introduction",
    "text": "Introduction\nThis cookbook attempts to walk through many of the example usecases for gt, and provide useful commentary around the use of the various gt functions. The full gt documentation has other more succinct examples and full function arguments.\nFor advanced use cases, make sure to check out the Advanced Cookbook"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#basic-usage",
    "href": "static/resources/gt-cookbook.html#basic-usage",
    "title": "gt cookbook",
    "section": "Basic Usage",
    "text": "Basic Usage\nTo create a gt table, use gt() on a data frame.\n\nlibrary(gt)\nlibrary(dplyr)\ngt(head(mtcars))\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n# pipe also works just fine!\nhead(mtcars) %>% \n  gt()\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nPreview long table\nSometimes you may want to see just a small portion of your input data. We can use gt_preview() in place of gt() to get the first x rows of data and the last y rows of data (which can be set by the top_n and bottom_n arguments).\n\ngtcars %>%\n  dplyr::select(mfr, model, year) %>%\n  gt_preview()\n\n\n\n\n\n\n\n      mfr\n      model\n      year\n    \n\n\n1\nFord\nGT\n2017\n\n\n2\nFerrari\n458 Speciale\n2015\n\n\n3\nFerrari\n458 Spider\n2015\n\n\n4\nFerrari\n458 Italia\n2014\n\n\n5\nFerrari\n488 GTB\n2016\n\n\n6..46\n\n\n\n\n\n47\nRolls-Royce\nWraith\n2016"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#save-output",
    "href": "static/resources/gt-cookbook.html#save-output",
    "title": "gt cookbook",
    "section": "Save output",
    "text": "Save output\nWhile the vast majority of the time you will simply execute the code inside RMarkdown or Shiny and get your beautiful table back, you can explicitly save the output to various different formats.\ngtsave() is the function, and it takes a gt table object and a filename.\n\nThe gtsave() function makes it easy to save a gt table to a file. The function guesses the file type by the extension provided in the output filename, producing either an HTML, PDF, PNG, LaTeX, or RTF file.\n\nThe most traditional format is HTML, which can be embedded into an existing website (ie Wordpress or a CMS), but the other formats (PDF, LaTex, RTF, PNG) have other use cases.\nPDF can be combined with other PDF formats, LaTeX can be placed into an existing doc, RTF can be copied into Word, Excel, or Powerpoint, and PNG can be used to post images of tables to social media like Twitter.\nRaw output\nThere are also functions for as_raw_html() or as_rtf() which allow you to get the raw output in the active R session. These are useful but seldom actually used unless for specific reasons. Again, in most examples you will simply call the gt code in your RMarkdown or Shiny app."
  },
  {
    "objectID": "static/resources/gt-cookbook.html#grouping-and-summary-rows",
    "href": "static/resources/gt-cookbook.html#grouping-and-summary-rows",
    "title": "gt cookbook",
    "section": "Grouping and Summary Rows",
    "text": "Grouping and Summary Rows\nYou can group rows in a table by specifying one or more columns in groupname_col:\n\nhead(mtcars) %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(groupname_col = \"cyl\")\n\n\n\n\n\n\nmpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n4 Cylinders\n    \n\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n8 Cylinders\n    \n\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\nOr by simply using dplyr::group_by()\n\nhead(mtcars) %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  group_by(cyl) %>% \n  gt()\n\n\n\n\n\n\nmpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n4 Cylinders\n    \n\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n8 Cylinders\n    \n\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\nCustom groups\nYou can also create custom groups with gt::tab_row_group(). This is typically useful for creating your own groups within gt itself, and it can include specific rows based on a logical statement (ie hp > 600).\n\ngtcars %>%\n  dplyr::select(model, year, hp, trq) %>%\n  head(8) %>% \n  gt() %>% \n  tab_row_group(\n    group = \"powerful\",\n    rows = hp <= 600\n  ) %>%\n  tab_row_group(\n    group = \"super powerful\",\n    rows = hp > 600\n  )\n\n\n\n\n\n\nmodel\n      year\n      hp\n      trq\n    \n\n\nsuper powerful\n    \n\nGT\n2017\n647\n550\n\n\n488 GTB\n2016\n661\n561\n\n\nGTC4Lusso\n2017\n680\n514\n\n\nFF\n2015\n652\n504\n\n\npowerful\n    \n\n458 Speciale\n2015\n597\n398\n\n\n458 Spider\n2015\n562\n398\n\n\n458 Italia\n2014\n562\n398\n\n\nCalifornia\n2015\n553\n557\n\n\n\n\n\n\nYou can also create meta-groups of a grouping category this way.\n\ngtcars %>% \n  dplyr::select(mfr:hp, mpg_c, mpg_h) %>% \n  dplyr::filter(mfr %in% c(\"Ford\", \"Dodge\", \"Chevrolet\", \"Nissan\", \"Acura\")) %>% \n  gt() %>% \n  tab_row_group(\n    group = \"Japanese\",\n    rows = mfr %in% c(\"Nissan\", \"Acura\")\n  ) %>% \n  tab_row_group(\n    group = \"American\",\n    rows = mfr %in% c(\"Ford\", \"Dodge\", \"Chevrolet\")\n  )\n\n\n\n\n\n\nmfr\n      model\n      year\n      trim\n      bdy_style\n      hp\n      mpg_c\n      mpg_h\n    \n\n\nAmerican\n    \n\nFord\nGT\n2017\nBase Coupe\ncoupe\n647\n11\n18\n\n\nChevrolet\nCorvette\n2016\nZ06 Coupe\ncoupe\n650\n15\n22\n\n\nDodge\nViper\n2017\nGT Coupe\ncoupe\n645\n12\n19\n\n\nJapanese\n    \n\nAcura\nNSX\n2017\nBase Coupe\ncoupe\n573\n21\n22\n\n\nNissan\nGT-R\n2016\nPremium Coupe\ncoupe\n545\n16\n22\n\n\n\n\n\n\nRow names\nYou can also convert a column into table rownames and specify it in the original gt() call.\n\nhead(mtcars) %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(rowname_col = \"cyl\")\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n6 Cylinders\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n4 Cylinders\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n6 Cylinders\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n8 Cylinders\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n6 Cylinders\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nIf you have a data.frame with rownames attached, you can use the rownames_to_stub argument to parse these properly.\n\nhead(mtcars) %>% \n  gt(rownames_to_stub = TRUE)\n\n\n\n\n\n\n\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nHowever, a tibble will drop rownames, so you can convert a data.frame’s existing rownames to a column with tibble::rownames_to_column(). gt will automatically use columns named rowname as a rowname stub.\n\nhead(mtcars) %>% \n  tibble::rownames_to_column() %>% \n  gt()\n\n\n\n\n\n\n\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nRownames and groups\nCombining rownames with groups can sometimes make the table easier to parse. Compare the two tables below:\n\n\n\nmtcars %>% \n  head() %>% \n  select(cyl, mpg:drat) %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(groupname_col = \"cyl\")\n\n\n\n\n\n\nmpg\n      disp\n      hp\n      drat\n    \n\n\n6 Cylinders\n    \n\n21.0\n160\n110\n3.90\n\n\n21.0\n160\n110\n3.90\n\n\n21.4\n258\n110\n3.08\n\n\n18.1\n225\n105\n2.76\n\n\n4 Cylinders\n    \n\n22.8\n108\n93\n3.85\n\n\n8 Cylinders\n    \n\n18.7\n360\n175\n3.15\n\n\n\n\n\n\n\n\n\nhead(mtcars) %>% \n  select(cyl, mpg:drat) %>% \n  tibble::rownames_to_column() %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(groupname_col = \"cyl\", rowname_col = \"rowname\")\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n    \n\n\n6 Cylinders\n    \n\nMazda RX4\n21.0\n160\n110\n3.90\n\n\nMazda RX4 Wag\n21.0\n160\n110\n3.90\n\n\nHornet 4 Drive\n21.4\n258\n110\n3.08\n\n\nValiant\n18.1\n225\n105\n2.76\n\n\n4 Cylinders\n    \n\nDatsun 710\n22.8\n108\n93\n3.85\n\n\n8 Cylinders\n    \n\nHornet Sportabout\n18.7\n360\n175\n3.15\n\n\n\n\n\n\n\n\nCreate blank rownames\nI typically will use a rowname column whenever I group data, but sometimes there may not be a “good” column to use here. You can pass in blank spaces to artificially move the group label to be presented closer to a “stub”.\n\nhead(mtcars) %>% \n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  mutate(blank_rowname = purrr::map(list(rep(\"&nbsp\", 8)), gt::html)) %>% \n  gt(rowname_col = \"blank_rowname\", groupname_col = \"cyl\")\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n4 Cylinders\n    \n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n8 Cylinders\n    \n\n&nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\nSummary Rows\nWhen rows are grouped, you can create summary rows in a column using the summary_rows function:\n\nmtcars %>% \n  head(8) %>% \n  tibble::rownames_to_column(var = \"name\") %>%\n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(groupname_col = \"cyl\", rowname_col = \"name\") %>% \n  summary_rows(\n    groups = TRUE,\n    fns = list(Average = ~mean(.))\n    )\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\nMazda RX4\n21.0\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nHornet 4 Drive\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nValiant\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nAverage\n20.38\n200.75\n108.75\n3.41\n3.04\n18.29\n0.50\n0.50\n3.50\n2.50\n\n\n4 Cylinders\n    \n\nDatsun 710\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nMerc 240D\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nAverage\n23.60\n127.35\n77.50\n3.77\n2.75\n19.30\n1.00\n0.50\n4.00\n1.50\n\n\n8 Cylinders\n    \n\nHornet Sportabout\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nDuster 360\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nAverage\n16.50\n360.00\n210.00\n3.18\n3.50\n16.43\n0.00\n0.00\n3.00\n3.00\n\n\n\n\n\n\nFurther customization of Summary Rows\nYou can pass additional summarization functions to the fns argument, optionally specify columns to apply the summary to, and apply a formatter to format the output.\n\nmtcars %>% \n  head(8) %>% \n  tibble::rownames_to_column(var = \"name\") %>%\n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(groupname_col = \"cyl\", rowname_col = \"name\") %>% \n  summary_rows(\n    groups = TRUE,\n    columns = c(mpg, disp, hp),\n    fns = list(\n      min = ~min(.),\n      max = ~max(.),\n      avg = ~mean(.)\n      ),\n    formatter = fmt_number\n    )\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\nMazda RX4\n21.0\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nHornet 4 Drive\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nValiant\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nmin\n18.10\n160.00\n105.00\n—\n—\n—\n—\n—\n—\n—\n\n\nmax\n21.40\n258.00\n110.00\n—\n—\n—\n—\n—\n—\n—\n\n\navg\n20.38\n200.75\n108.75\n—\n—\n—\n—\n—\n—\n—\n\n\n4 Cylinders\n    \n\nDatsun 710\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nMerc 240D\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nmin\n22.80\n108.00\n62.00\n—\n—\n—\n—\n—\n—\n—\n\n\nmax\n24.40\n146.70\n93.00\n—\n—\n—\n—\n—\n—\n—\n\n\navg\n23.60\n127.35\n77.50\n—\n—\n—\n—\n—\n—\n—\n\n\n8 Cylinders\n    \n\nHornet Sportabout\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nDuster 360\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nmin\n14.30\n360.00\n175.00\n—\n—\n—\n—\n—\n—\n—\n\n\nmax\n18.70\n360.00\n245.00\n—\n—\n—\n—\n—\n—\n—\n\n\navg\n16.50\n360.00\n210.00\n—\n—\n—\n—\n—\n—\n—\n\n\n\n\n\n\nYou can use any of R’s built-in aggregate functions, or a custom function.\n# some examples\nsum()     # Sum of numbers\nmean()    # Mean of numbers\nmax()     # Maximum of numbers\nmin()     # Minimum of numbers\nmedian()  # Median of numbers\nsd()      # Standard Deviation of numbers\nOr a custom aggregate function: ::: {.cell}\nmode <- function(x) {\n  unique_var <- unique(x)\n  unique_var[which.max(tabulate(match(x, unique_var)))]\n}\n:::\nMultiple groups\nYou can supply multiple groups via dplyr::group_by(), which are then appended with a - separator.\n\nhead(mtcars, 8) %>% \n  tibble::rownames_to_column(var = \"name\") %>%\n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  group_by(cyl, gear) %>% \n  arrange(cyl) %>%\n  gt(rowname_col = \"name\") %>% \n  summary_rows(\n    groups = TRUE,\n    fns = list(Average = ~mean(.))\n    )\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      carb\n    \n\n\n4 Cylinders - 4\n    \n\nDatsun 710\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n1\n\n\nMerc 240D\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n2\n\n\nAverage\n23.60\n127.35\n77.50\n3.77\n2.75\n19.30\n1.00\n0.50\n1.50\n\n\n6 Cylinders - 4\n    \n\nMazda RX4\n21.0\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nAverage\n21.00\n160.00\n110.00\n3.90\n2.75\n16.74\n0.00\n1.00\n4.00\n\n\n6 Cylinders - 3\n    \n\nHornet 4 Drive\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n1\n\n\nValiant\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n1\n\n\nAverage\n19.75\n241.50\n107.50\n2.92\n3.34\n19.83\n1.00\n0.00\n1.00\n\n\n8 Cylinders - 3\n    \n\nHornet Sportabout\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n2\n\n\nDuster 360\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n4\n\n\nAverage\n16.50\n360.00\n210.00\n3.18\n3.50\n16.43\n0.00\n0.00\n3.00\n\n\n\n\n\n\nGrand summary\nGrand summary rows incorporate all of the available data, regardless of whether some of the data are part of row groups.\n\nhead(mtcars, 8) %>% \n  tibble::rownames_to_column(var = \"name\") %>%\n  mutate(cyl = paste(cyl, \"Cylinders\")) %>% \n  gt(rowname_col = \"name\", groupname_col = \"cyl\") %>% \n  grand_summary_rows(fns = list(Average = ~mean(.)))\n\n\n\n\n\n\n\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6 Cylinders\n    \n\nMazda RX4\n21.0\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nHornet 4 Drive\n21.4\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nValiant\n18.1\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n4 Cylinders\n    \n\nDatsun 710\n22.8\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nMerc 240D\n24.4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\n8 Cylinders\n    \n\nHornet Sportabout\n18.7\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nDuster 360\n14.3\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nAverage\n20.21\n222.21\n126.25\n3.44\n3.09\n18.08\n0.50\n0.38\n3.50\n2.38"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#column-formatting",
    "href": "static/resources/gt-cookbook.html#column-formatting",
    "title": "gt cookbook",
    "section": "Column Formatting",
    "text": "Column Formatting\nYou can format data in a column by using the various fmt_??? functions:\ninfo_date_style() # View a table with info on date styles\n\ninfo_time_style() # View a table with info on time styles\n\ninfo_currencies() # View a table with info on supported currencies\n\ninfo_locales()    # View a table with info on supported locales\nexibble\nThe exibble dataset is built into gt and has a lot of different formats to demo the specific fmt_??? functions.\n\ndplyr::glimpse(exibble)\n\nRows: 8\nColumns: 9\n$ num      <dbl> 1.111e-01, 2.222e+00, 3.333e+01, 4.444e+02, 5.550e+03, NA, 7.…\n$ char     <chr> \"apricot\", \"banana\", \"coconut\", \"durian\", NA, \"fig\", \"grapefr…\n$ fctr     <fct> one, two, three, four, five, six, seven, eight\n$ date     <chr> \"2015-01-15\", \"2015-02-15\", \"2015-03-15\", \"2015-04-15\", \"2015…\n$ time     <chr> \"13:35\", \"14:40\", \"15:45\", \"16:50\", \"17:55\", NA, \"19:10\", \"20…\n$ datetime <chr> \"2018-01-01 02:22\", \"2018-02-02 14:33\", \"2018-03-03 03:44\", \"…\n$ currency <dbl> 49.950, 17.950, 1.390, 65100.000, 1325.810, 13.255, NA, 0.440\n$ row      <chr> \"row_1\", \"row_2\", \"row_3\", \"row_4\", \"row_5\", \"row_6\", \"row_7\"…\n$ group    <chr> \"grp_a\", \"grp_a\", \"grp_a\", \"grp_a\", \"grp_b\", \"grp_b\", \"grp_b\"…\n\n\n\nexibble %>% \n  gt(rowname_col = \"row\", groupname_col = \"group\") %>% \n  fmt_number(columns = vars(num)) %>% \n  fmt_date(columns = vars(date)) %>% \n  fmt_time(columns = vars(time)) %>% \n  fmt_datetime(columns = vars(datetime)) %>% \n  fmt_currency(columns = vars(currency))\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      num\n      char\n      fctr\n      date\n      time\n      datetime\n      currency\n    \n\n\ngrp_a\n    \n\nrow_1\n0.11\napricot\none\nThursday, January 15, 2015\n13:35\nMonday, January 1, 2018 02:22\n$49.95\n\n\nrow_2\n2.22\nbanana\ntwo\nSunday, February 15, 2015\n14:40\nFriday, February 2, 2018 14:33\n$17.95\n\n\nrow_3\n33.33\ncoconut\nthree\nSunday, March 15, 2015\n15:45\nSaturday, March 3, 2018 03:44\n$1.39\n\n\nrow_4\n444.40\ndurian\nfour\nWednesday, April 15, 2015\n16:50\nWednesday, April 4, 2018 15:55\n$65,100.00\n\n\ngrp_b\n    \n\nrow_5\n5,550.00\nNA\nfive\nFriday, May 15, 2015\n17:55\nSaturday, May 5, 2018 04:00\n$1,325.81\n\n\nrow_6\nNA\nfig\nsix\nMonday, June 15, 2015\nNA\nWednesday, June 6, 2018 16:11\n$13.26\n\n\nrow_7\n777,000.00\ngrapefruit\nseven\nNA\n19:10\nSaturday, July 7, 2018 05:22\nNA\n\n\nrow_8\n8,880,000.00\nhoneydew\neight\nSaturday, August 15, 2015\n20:20\nNA\n$0.44\n\n\n\n\n\n\nTo use a specific locale for data formatting, provide specific arguments to the respective functions.\nDate formatting\n\nexibble %>% \n  select(date, time, datetime) %>% \n  gt(rowname_col = \"row\", groupname_col = \"group\") %>% \n  fmt_date(columns = vars(date), date_style = 3) %>% \n  fmt_time(columns = vars(time), time_style = 5) %>% \n  fmt_datetime(columns = vars(datetime), date_style = 6, time_style = 4)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ndate\n      time\n      datetime\n    \n\n\nThu, Jan 15, 2015\n1 PM\nJan 1, 2018 2:22 AM\n\n\nSun, Feb 15, 2015\n2 PM\nFeb 2, 2018 2:33 PM\n\n\nSun, Mar 15, 2015\n3 PM\nMar 3, 2018 3:44 AM\n\n\nWed, Apr 15, 2015\n4 PM\nApr 4, 2018 3:55 PM\n\n\nFri, May 15, 2015\n5 PM\nMay 5, 2018 4:00 AM\n\n\nMon, Jun 15, 2015\nNA\nJun 6, 2018 4:11 PM\n\n\nNA\n7 PM\nJul 7, 2018 5:22 AM\n\n\nSat, Aug 15, 2015\n8 PM\nNA\n\n\n\n\n\n\nCurrency formatting\n\nmoney <- data.frame(\n  USD = c(12.12, 2141.213, 0.42, 1.55, 34414),\n  EUR = c(10.68, 1884.27, 0.37, 1.36, 30284.32),\n  INR = c(861.07, 152122.48, 29.84, 110, 2444942.63),\n  JPY = c(1280, 226144, 44.36, 164, 3634634.61),\n  MAD = c(115.78, 20453.94, 4.01, 15, 328739.73)\n)\n\nmoney %>%\n  gt() %>%\n  fmt_currency(columns = vars(USD), currency = \"USD\") %>%\n  fmt_currency(columns = vars(EUR), currency = \"EUR\") %>%\n  fmt_currency(columns = vars(INR), currency = \"INR\") %>%\n  fmt_currency(columns = vars(JPY), currency = \"JPY\") %>%\n  fmt_currency(columns = vars(MAD), currency = \"MAD\")\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nUSD\n      EUR\n      INR\n      JPY\n      MAD\n    \n\n\n$12.12\n€10.68\n₹861.07\n¥1,280\nDh115.78\n\n\n$2,141.21\n€1,884.27\n₹152,122.48\n¥226,144\nDh20,453.94\n\n\n$0.42\n€0.37\n₹29.84\n¥44\nDh4.01\n\n\n$1.55\n€1.36\n₹110.00\n¥164\nDh15.00\n\n\n$34,414.00\n€30,284.32\n₹2,444,942.63\n¥3,634,635\nDh328,739.73\n\n\n\n\n\n\nPercent formatting\n\ndata.frame(\n  x = 1:5,\n  y = 6:10,\n  percent = seq(from = 0.1, to =  0.2, by = 0.025)\n) %>% \n  gt() %>% \n  fmt_percent(columns = vars(percent), decimals = 1)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nx\n      y\n      percent\n    \n\n\n1\n6\n10.0%\n\n\n2\n7\n12.5%\n\n\n3\n8\n15.0%\n\n\n4\n9\n17.5%\n\n\n5\n10\n20.0%\n\n\n\n\n\n\nNumber formatting\nNumeric formatting can include changes to the number of decimals, separators (ie “,”), or even suffixing (ie K, Mb, etc).\n\nexibble %>% \n  select(group, num, currency) %>% \n  gt() %>% \n  fmt_number(columns = vars(num), decimals = 4, sep_mark = \"\") %>% \n  # Suffixing scale and apply suffixes to larger numbers \n  fmt_number(columns = vars(currency), decimals = 1, suffixing = TRUE)\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ngroup\n      num\n      currency\n    \n\n\ngrp_a\n0.1111\n50.0\n\n\ngrp_a\n2.2220\n17.9\n\n\ngrp_a\n33.3300\n1.4\n\n\ngrp_a\n444.4000\n65.1K\n\n\ngrp_b\n5550.0000\n1.3K\n\n\ngrp_b\nNA\n13.3\n\n\ngrp_b\n777000.0000\nNA\n\n\ngrp_b\n8880000.0000\n0.4\n\n\n\n\n\n\nDisplaying missing values\nMissing values are ignored by formatters and shown as NA by default. You can specify missing values with other indicators with fmt_missing\n\nexibble %>% \n  select(group, currency, num) %>% \n  gt() %>% \n  fmt_missing(columns = vars(currency), rows = is.na(currency)) %>% \n  fmt_missing(columns = vars(num), rows = is.na(num), missing_text = \"none\")\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ngroup\n      currency\n      num\n    \n\n\ngrp_a\n49.950\n1.111e-01\n\n\ngrp_a\n17.950\n2.222e+00\n\n\ngrp_a\n1.390\n3.333e+01\n\n\ngrp_a\n65100.000\n4.444e+02\n\n\ngrp_b\n1325.810\n5.550e+03\n\n\ngrp_b\n13.255\nnone\n\n\ngrp_b\n—\n7.770e+05\n\n\ngrp_b\n0.440\n8.880e+06\n\n\n\n\n\n\nFormat markdown\nYou can also parse cell content that contains arbitrary markdown.\n\n# Create a few Markdown-based\n# text snippets\ntext_1a <- \"\n### This is Markdown.\n\nMarkdown’s syntax is comprised entirely of\npunctuation characters, which punctuation\ncharacters have been carefully chosen so as\nto look like what they mean... assuming\nyou’ve ever used email.\n\"\n\ntext_1b <- \"\nInfo on Markdown syntax can be found\n[here](https://daringfireball.net/projects/markdown/).\n\"\n\ntext_2a <- \"\nThe **gt** package has these datasets:\n\n - `countrypops`\n - `sza`\n - `gtcars`\n - `sp500`\n - `pizzaplace`\n - `exibble`\n\"\n\ntext_2b <- \"\nThere's a quick reference [here](https://commonmark.org/help/).\n\"\n\n# Arrange the text snippets as a tibble\n# using the `dplyr::tribble()` function;\n# then, create a gt table and format\n# all columns with `fmt_markdown()`\ndplyr::tribble(\n  ~Markdown, ~md,\n  text_1a,   text_2a,\n  text_1b,   text_2b,\n  ) %>%\n  gt() %>%\n  fmt_markdown(columns = TRUE) %>%\n  tab_options(table.width = px(400))\n\nWarning: `columns = TRUE` has been deprecated in gt 0.3.0:\n* please use `columns = everything()` instead\n\n\n\n\n\n\n\nMarkdown\n      md\n    \n\n\n\nThis is Markdown.\nMarkdown’s syntax is comprised entirely of\npunctuation characters, which punctuation\ncharacters have been carefully chosen so as\nto look like what they mean... assuming\nyou’ve ever used email.\n\n\nThe gt package has these datasets:\n\ncountrypops\nsza\ngtcars\nsp500\npizzaplace\nexibble\n\n\n\n\n\nInfo on Markdown syntax can be found\nhere.\n\n\nThere's a quick reference here.\n\n\n\n\n\n\n\nCustom data formatting\nIf none of the built-in formatters apply to your data, you can use fmt() instead.\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  gt() %>% \n  fmt(\n    columns = vars(count),\n    fns = function(x){ paste(x, \"bananas\")}\n  ) \n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncount\n      weight_g\n      color\n    \n\n\n1 bananas\n150.65\ngreen\n\n\n2 bananas\n149.65\nyellow\n\n\n3 bananas\n171.28\nyellow\n\n\n4 bananas\n142.58\ngreen\n\n\n5 bananas\n139.04\nyellow"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#create-or-modify-parts",
    "href": "static/resources/gt-cookbook.html#create-or-modify-parts",
    "title": "gt cookbook",
    "section": "Create or Modify Parts",
    "text": "Create or Modify Parts\nAdd a header\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  gt() %>% \n  tab_header(\n    title = \"Number of bananas, weight, and ripeness\",\n    subtitle = \"Bananas sourced in Mar 2021\"\n    )\n\n\n\n\n\n\n\nNumber of bananas, weight, and ripeness\n    \n\nBananas sourced in Mar 2021\n    \n\n\ncount\n      weight_g\n      color\n    \n\n\n1\n150.65\ngreen\n\n\n2\n149.65\nyellow\n\n\n3\n171.28\nyellow\n\n\n4\n142.58\ngreen\n\n\n5\n139.04\nyellow\n\n\n\n\n\n\nFormat header\nYou can parse markdown with md() or HTML with html().\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  gt() %>% \n  tab_header(\n    title = md(\"**Number of bananas, weight, and ripeness**\"),\n    subtitle = html(\"Bananas sourced in <em><b>Mar 2021<b></em>\")\n    )\n\n\n\n\n\n\n\nNumber of bananas, weight, and ripeness\n    \n\nBananas sourced in Mar 2021\n\n    \n\n\ncount\n      weight_g\n      color\n    \n\n\n1\n150.65\ngreen\n\n\n2\n149.65\nyellow\n\n\n3\n171.28\nyellow\n\n\n4\n142.58\ngreen\n\n\n5\n139.04\nyellow\n\n\n\n\n\n\nAdd spanner column labels\nYou can create column label “groups” with the tab_spanner() function.\n\nhead(gtcars, 8) %>%\n  dplyr::select(model:mpg_h, msrp) %>%  \n  gt(rowname_col = \"model\") %>%\n  tab_spanner(\n    label = \"Performance\",\n    columns = vars(hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h)\n  ) %>% \n  tab_spanner(\n    label = \"Car Info\",\n    columns = vars(year, bdy_style, trim)\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n\n      \n        Car Info\n      \n      \n        Performance\n      \n      msrp\n    \n\nyear\n      bdy_style\n      trim\n      hp\n      hp_rpm\n      trq\n      trq_rpm\n      mpg_c\n      mpg_h\n    \n\n\n\nGT\n2017\ncoupe\nBase Coupe\n647\n6250\n550\n5900\n11\n18\n447000\n\n\n458 Speciale\n2015\ncoupe\nBase Coupe\n597\n9000\n398\n6000\n13\n17\n291744\n\n\n458 Spider\n2015\nconvertible\nBase\n562\n9000\n398\n6000\n13\n17\n263553\n\n\n458 Italia\n2014\ncoupe\nBase Coupe\n562\n9000\n398\n6000\n13\n17\n233509\n\n\n488 GTB\n2016\ncoupe\nBase Coupe\n661\n8000\n561\n3000\n15\n22\n245400\n\n\nCalifornia\n2015\nconvertible\nBase Convertible\n553\n7500\n557\n4750\n16\n23\n198973\n\n\nGTC4Lusso\n2017\ncoupe\nBase Coupe\n680\n8250\n514\n5750\n12\n17\n298000\n\n\nFF\n2015\ncoupe\nBase Coupe\n652\n8000\n504\n6000\n11\n16\n295000\n\n\n\n\n\n\nAdd spanner delim\nFor columns that are well formatted, gt can parse the delimiter and “split” the label into its component parts.\n\nhead(gtcars, 8) %>%\n  dplyr::select(model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt(rowname_col = \"model\") %>%\n  tab_spanner_delim(delim = \"_\")\n\n\n\n\n\n\n\n\n      year\n      trim\n      \n        mpg\n      \n    \n\ncity\n      hwy\n    \n\n\n\nGT\n2017\nBase Coupe\n11\n18\n\n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\n488 GTB\n2016\nBase Coupe\n15\n22\n\n\nCalifornia\n2015\nBase Convertible\n16\n23\n\n\nGTC4Lusso\n2017\nBase Coupe\n12\n17\n\n\nFF\n2015\nBase Coupe\n11\n16"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#locations",
    "href": "static/resources/gt-cookbook.html#locations",
    "title": "gt cookbook",
    "section": "Locations",
    "text": "Locations\ngt usesthe locations argument across many functions to let you tightly customize specific components. These are considered “Helper Functions”, and are further expended in the gt documentation.\nLocations is used with the various cells_??? functions like: cells_title, cells_stubhead, cells_column_spanners().\nCell body\nFor the cells_body(), it includes arguments for columns and rows, allowing you to specify specific columns or even columns + subsets of specific rows based on logicals.\n\nhead(gtcars, 8) %>%\n  dplyr::select(model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt(rowname_col = \"model\") %>% \n  tab_style(\n    style = cell_text(color = \"red\"),\n    locations = cells_body(\n      columns = vars(trim),\n      rows = trim == \"Base Convertible\"\n      )\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      year\n      trim\n      mpg_city\n      mpg_hwy\n    \n\n\nGT\n2017\nBase Coupe\n11\n18\n\n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\n488 GTB\n2016\nBase Coupe\n15\n22\n\n\nCalifornia\n2015\nBase Convertible\n16\n23\n\n\nGTC4Lusso\n2017\nBase Coupe\n12\n17\n\n\nFF\n2015\nBase Coupe\n11\n16\n\n\n\n\n\n\nTable title\nTable header/title can be affected by cells_title, and it can affect either the title, subtitle or both (default).\n\nhead(gtcars, 8) %>%\n  dplyr::select(model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt() %>% \n  tab_header(\n    title = \"These are not efficient cars\",\n    subtitle = \"But they are fast\"\n    ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  )\n\n\n\n\n\n\n\nThese are not efficient cars\n    \n\nBut they are fast\n    \n\n\nmodel\n      year\n      trim\n      mpg_city\n      mpg_hwy\n    \n\n\nGT\n2017\nBase Coupe\n11\n18\n\n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\n488 GTB\n2016\nBase Coupe\n15\n22\n\n\nCalifornia\n2015\nBase Convertible\n16\n23\n\n\nGTC4Lusso\n2017\nBase Coupe\n12\n17\n\n\nFF\n2015\nBase Coupe\n11\n16\n\n\n\n\n\n\nTable stub\nYou can affect both the stubhead and the stub rows themselves as well.\n\nhead(gtcars, 8) %>%\n  dplyr::select(model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt(rowname_col = \"model\") %>% \n  tab_stubhead(\"Car Models\") %>% \n  tab_style(\n    style = list(\n      cell_fill(\"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_stubhead()\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"darkgrey\", weight = \"bold\"),\n    locations = cells_stub()\n  )\n\n\n\n\n\n\nCar Models\n      year\n      trim\n      mpg_city\n      mpg_hwy\n    \n\n\nGT\n2017\nBase Coupe\n11\n18\n\n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\n488 GTB\n2016\nBase Coupe\n15\n22\n\n\nCalifornia\n2015\nBase Convertible\n16\n23\n\n\nGTC4Lusso\n2017\nBase Coupe\n12\n17\n\n\nFF\n2015\nBase Coupe\n11\n16\n\n\n\n\n\n\nRow group\nRow groups can be further emphasized by changing the background or other styling.\n\ngtcars %>% \n  filter(mfr %in% c(\"Ferrari\", \"Porsche\")) %>% \n  dplyr::select(mfr, model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt(rowname_col = \"model\", groupname_col = \"mfr\") %>% \n  tab_style(\n    style = list(\n      cell_fill(\"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_row_groups()\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"darkgrey\", weight = \"bold\"),\n    locations = cells_stub()\n  )\n\n\n\n\n\n\n\n      year\n      trim\n      mpg_city\n      mpg_hwy\n    \n\n\nFerrari\n    \n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\n488 GTB\n2016\nBase Coupe\n15\n22\n\n\nCalifornia\n2015\nBase Convertible\n16\n23\n\n\nGTC4Lusso\n2017\nBase Coupe\n12\n17\n\n\nFF\n2015\nBase Coupe\n11\n16\n\n\nF12Berlinetta\n2015\nBase Coupe\n11\n16\n\n\nLaFerrari\n2015\nBase Coupe\n12\n16\n\n\nPorsche\n    \n\n718 Boxster\n2017\nBase Convertible\n21\n28\n\n\n718 Cayman\n2017\nBase Coupe\n20\n29\n\n\n911\n2016\nCarrera Coupe\n20\n28\n\n\nPanamera\n2016\nBase Sedan\n18\n28\n\n\n\n\n\n\nGroup summary\nTo affect the grouped summary rows (or grand summary rows) you can use cells_summary() or cells_grand_summary().\n\ngtcars %>% \n  dplyr::filter(mfr %in% c(\"Ferrari\", \"Porsche\", \"Lamborghini\")) %>% \n  dplyr::group_by(mfr) %>% \n  dplyr::slice_head(n = 3) %>% \n  dplyr::ungroup() %>% \n  dplyr::select(mfr, model:trim, mpg_city = mpg_c, mpg_hwy = mpg_h) %>%  \n  gt(rowname_col = \"model\", groupname_col = \"mfr\") %>% \n  gt::summary_rows(\n    groups = TRUE, columns = vars(mpg_city, mpg_hwy),\n    fns = list(Average = ~mean(.)),\n    formatter = fmt_number, decimals = 1\n  ) %>% \n  tab_style(\n    style = list(\n      cell_text(color = \"white\", font = google_font(\"Fira Mono\")),\n      cell_fill(\"black\")\n    ),\n    locations = cells_summary()\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      year\n      trim\n      mpg_city\n      mpg_hwy\n    \n\n\nFerrari\n    \n\n458 Speciale\n2015\nBase Coupe\n13\n17\n\n\n458 Spider\n2015\nBase\n13\n17\n\n\n458 Italia\n2014\nBase Coupe\n13\n17\n\n\nAverage\n—\n—\n13.0\n17.0\n\n\nLamborghini\n    \n\nAventador\n2015\nLP 700-4 Coupe\n11\n18\n\n\nHuracan\n2015\nLP 610-4 Coupe\n16\n20\n\n\nGallardo\n2014\nLP 550-2 Coupe\n12\n20\n\n\nAverage\n—\n—\n13.0\n19.3\n\n\nPorsche\n    \n\n718 Boxster\n2017\nBase Convertible\n21\n28\n\n\n718 Cayman\n2017\nBase Coupe\n20\n29\n\n\n911\n2016\nCarrera Coupe\n20\n28\n\n\nAverage\n—\n—\n20.3\n28.3\n\n\n\n\n\n\nSpanners and labels\nYou can also affect the column labels or spanners above the labels. Note the use of a spanner id to make it easy to identify the specific spanner to apply the changes to.\n\nexibble %>%\n  dplyr::select(-fctr, -currency, -group) %>%\n  gt(rowname_col = \"row\") %>%\n  tab_spanner(\n    label = \"dates and times\",\n    id = \"dt\",\n    columns = vars(date, time, datetime)\n  ) %>%\n  tab_style(\n    style = cell_text(color = \"darkgrey\", transform = \"uppercase\"),\n    locations = cells_column_spanners(spanners = \"dt\")\n  ) %>% \n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels(columns = vars(date, time, datetime))\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n\n      num\n      char\n      \n        dates and times\n      \n    \n\ndate\n      time\n      datetime\n    \n\n\n\nrow_1\n1.111e-01\napricot\n2015-01-15\n13:35\n2018-01-01 02:22\n\n\nrow_2\n2.222e+00\nbanana\n2015-02-15\n14:40\n2018-02-02 14:33\n\n\nrow_3\n3.333e+01\ncoconut\n2015-03-15\n15:45\n2018-03-03 03:44\n\n\nrow_4\n4.444e+02\ndurian\n2015-04-15\n16:50\n2018-04-04 15:55\n\n\nrow_5\n5.550e+03\nNA\n2015-05-15\n17:55\n2018-05-05 04:00\n\n\nrow_6\nNA\nfig\n2015-06-15\nNA\n2018-06-06 16:11\n\n\nrow_7\n7.770e+05\ngrapefruit\nNA\n19:10\n2018-07-07 05:22\n\n\nrow_8\n8.880e+06\nhoneydew\n2015-08-15\n20:20\nNA"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#add-notes",
    "href": "static/resources/gt-cookbook.html#add-notes",
    "title": "gt cookbook",
    "section": "Add notes",
    "text": "Add notes\nYou can also add footnotes or sourcenotes to arbitrary locations within the table. Both will “output” to the bottom of the table, but can place their respective indicators elsewhere.\nAdd footnote\nFootnotes can be added to arbitrary locations with tab_footnote(). Here we add a footnote specifically to the mpg_h column label.\n\ngtcars %>%\n  dplyr::select(model, year, trq, mpg_h) %>%\n  head(6) %>% \n  gt(rowname_col = \"model\") %>%\n  tab_footnote(\n    locations = cells_column_labels(vars(mpg_h)),\n    footnote = \"Miles per Gallon on Highway\"\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      year\n      trq\n      mpg_h1\n\n    \n\n\nGT\n2017\n550\n18\n\n\n458 Speciale\n2015\n398\n17\n\n\n458 Spider\n2015\n398\n17\n\n\n458 Italia\n2014\n398\n17\n\n\n488 GTB\n2016\n561\n22\n\n\nCalifornia\n2015\n557\n23\n\n\n\n\n1 Miles per Gallon on Highway\n    \n\n\n\n\nThe location argument allows for other areas to be specified, and the footnote argument can also parse markdown/HTML with the md() and html() helpers.\n\ngtcars %>%\n  dplyr::select(model, year, trq, mpg_h) %>%\n  head(6) %>% \n  gt(rowname_col = \"model\") %>%\n  tab_footnote(\n    locations = cells_stub(rows = c(2,3,6)),\n    footnote = md(\"Manufacturing was interruped for these cars in **2015**\")\n  )\n\n\n\n\n\n\n\n      year\n      trq\n      mpg_h\n    \n\n\nGT\n2017\n550\n18\n\n\n458 Speciale1\n\n2015\n398\n17\n\n\n458 Spider1\n\n2015\n398\n17\n\n\n458 Italia\n2014\n398\n17\n\n\n488 GTB\n2016\n561\n22\n\n\nCalifornia1\n\n2015\n557\n23\n\n\n\n\n1 Manufacturing was interruped for these cars in 2015\n\n    \n\n\n\n\nAdd a source note\nSource notes, like “data sourced from…” can be added with tab_source_note(), and again it can parse arbitrary HTML or md.\n\nsource_tag <- \"Data from <a href='https://www.edmunds.com'>Edmunds.com</a>\"\n\ngtcars %>%\n  dplyr::select(model, year, trq, mpg_h) %>%\n  head(6) %>% \n  gt(rowname_col = \"model\") %>% \n  tab_source_note(html(source_tag))\n\n\n\n\n\n\n\n      year\n      trq\n      mpg_h\n    \n\n\nGT\n2017\n550\n18\n\n\n458 Speciale\n2015\n398\n17\n\n\n458 Spider\n2015\n398\n17\n\n\n458 Italia\n2014\n398\n17\n\n\n488 GTB\n2016\n561\n22\n\n\nCalifornia\n2015\n557\n23\n\n\n\nData from Edmunds.com"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#conditional-styling",
    "href": "static/resources/gt-cookbook.html#conditional-styling",
    "title": "gt cookbook",
    "section": "Conditional styling",
    "text": "Conditional styling\nYou can transform specific portions of the table based on conditional logic.\nExample conditionals include:\nbase:ifelse()\ndplyr::if_else()\ndplyr::case_when()\nText transform\nYou can change specific text based on a function with text_transform(). This is extremely powerful, but specific to only the column being transformed.\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  gt() %>% \n  text_transform(\n    locations = cells_body(\n      columns = vars(weight_g)),\n    fn = function(x) {\n      paste0(\n        x, \" (\",\n        dplyr::case_when(\n          x > 150   ~ \"large\",\n          x <= 150  ~ \"small\"),\n        \")\")\n    }\n  ) \n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncount\n      weight_g\n      color\n    \n\n\n1\n150.65 (large)\ngreen\n\n\n2\n149.65 (small)\nyellow\n\n\n3\n171.28 (large)\nyellow\n\n\n4\n142.58 (small)\ngreen\n\n\n5\n139.04 (small)\nyellow\n\n\n\n\n\n\nFormatting changes\nYou can logically match to rows and apply specific styling to them such as color.\n\nstocks <- data.frame(\n  Symbol = c(\"GOOG\", \"FB\", \"AMZN\", \"NFLX\", \"TSLA\"),\n  Price = c(1265.13, 187.89, 1761.33, 276.82, 328.13),\n  Change = c(4.14, 1.51, -19.45, 5.32, -12.45)\n)\nstocks %>% \n  gt() %>% \n  tab_style(\n    style = cell_text(color = \"red\", weight = \"bold\"),\n    locations = cells_body(\n      columns = vars(Change),\n      rows = Change < 0\n    )\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"blue\", weight = \"bold\"),\n    locations = cells_body(\n      columns = vars(Change),\n      rows = Change >= 0\n    )\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nSymbol\n      Price\n      Change\n    \n\n\nGOOG\n1265.13\n4.14\n\n\nFB\n187.89\n1.51\n\n\nAMZN\n1761.33\n-19.45\n\n\nNFLX\n276.82\n5.32\n\n\nTSLA\n328.13\n-12.45\n\n\n\n\n\n\nStyle the table\nWith the tab_style() function we can target specific cells and apply styles to them. This is best done in conjunction with the helper functions cell_text(), cell_fill(), and cell_borders().\nAt present this function is focused on the application of styles for HTML output only (as such, other output formats will ignore all tab_style() calls). Using the aforementioned helper functions, here are some of the styles we can apply:\n\nthe background color of the cell (cell_fill(): color)\nthe cell’s text color, font, and size (cell_text(): color, font, size)\nthe text style (cell_text(): style), enabling the use of italics or oblique text.\nthe text weight (cell_text(): weight), allowing the use of thin to bold text (the degree of choice is greater with variable fonts)\nthe alignment and indentation of text (cell_text(): align and indent)\nthe cell borders (cell_borders())\n\n\ndata.frame(\n  count = c(1L, 2L, 3L, 4L, 5L),\n  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),\n  color = c(\"green\", \"yellow\", \"yellow\", \"green\", \"yellow\")\n) %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightgrey\"),\n      \"font-variant: small-caps;\"\n    ),\n    locations = cells_body(columns = vars(color))\n  ) %>% \n  tab_style(\n    style = list(\n      cell_text(color = \"green\")\n    ),\n    locations = cells_body(\n      columns = vars(color),\n      # conditional logic\n      rows = color == \"green\"\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_text(color = \"goldenrod\")\n    ),\n    locations = cells_body(\n      columns = vars(color),\n      # conditional logic\n      rows = color == \"yellow\"\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_borders(sides = \"right\", color = \"black\", weight = px(3))\n    ),\n    locations = cells_body(\n      # entire column\n      columns = vars(weight_g)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_text(transform = \"uppercase\", weight = \"bold\")\n    ),\n    # different location\n    locations = cells_column_labels(everything())\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncount\n      weight_g\n      color\n    \n\n\n1\n150.65\ngreen\n\n\n2\n149.65\nyellow\n\n\n3\n171.28\nyellow\n\n\n4\n142.58\ngreen\n\n\n5\n139.04\nyellow"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#modify-columns",
    "href": "static/resources/gt-cookbook.html#modify-columns",
    "title": "gt cookbook",
    "section": "Modify Columns",
    "text": "Modify Columns\nColumn labels\nThe cols_label() function provides the flexibility to relabel one or more columns and we even have the option to use the md() or html() helper functions for rendering column labels from Markdown or using HTML.\n\nhead(mtcars) %>% \n  gt() %>% \n  cols_label(\n    mpg = \"Miles/Gal\",\n    cyl = \"Cylinders\"\n  )\n\n\n\n\n\n\nMiles/Gal\n      Cylinders\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nRelabel with markdown or HTML\nYou can also parse markdown with md() or HTML with html() within the label string.\n\nhead(mtcars) %>% \n  gt() %>% \n  cols_label(\n    mpg = md(\"**Miles/Gal**\"),       # recognizes markdown syntax\n    cyl = html(\"<em>Cylinders</em>\") # recognizes HTML syntax\n  )\n\n\n\n\n\n\nMiles/Gal\n      Cylinders\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nColumn Alignment\n\nThe individual alignments of columns (which includes the column labels and all of their data cells) can be modified. We have the option to align text to the left, the center, and the right.\n\nFor this example we’ve also included all the table lines to “show” the alignment a bit better.\n\ncountrypops %>%\n  dplyr::select(-contains(\"code\")) %>%\n  dplyr::filter(country_name == \"Mongolia\") %>%\n  tail(5) %>%\n  gt() %>%\n  cols_align(\n    align = \"left\",\n    columns = vars(country_name)\n  ) %>% \n  cols_align(\n    align = \"center\",\n    columns = vars(year)\n  ) %>% \n  cols_align(\n    align = \"right\",\n    columns = vars(population)\n  ) %>% \n  tab_options(table.width = px(300)) %>% \n  opt_table_lines()\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncountry_name\n      year\n      population\n    \n\n\nMongolia\n2013\n2869107\n\n\nMongolia\n2014\n2923896\n\n\nMongolia\n2015\n2976877\n\n\nMongolia\n2016\n3027398\n\n\nMongolia\n2017\n3075647\n\n\n\n\n\n\nOptimal alignment\nTypically, the best practice is to use left-align for text of variable length and right-align for numeric values. The reasoning can be highlighted in the table below. We want to align numeric values on the same scale so that they can be compared on the same scale, whereas text is more easily readable left-aligned. Center-align can be used with strings or values of equal-length.\nNote that fmt_number and other fmt_??? applied to numeric will automatically right-align, but text will default to left-align.\n\ngt::exibble %>% \n  select(group, char, num, currency) %>% \n  gt() %>% \n  cols_align(align = \"center\", columns = vars(group)) %>% \n  fmt_number(columns = vars(num)) %>% \n  fmt_currency(columns = vars(currency))\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ngroup\n      char\n      num\n      currency\n    \n\n\ngrp_a\napricot\n0.11\n$49.95\n\n\ngrp_a\nbanana\n2.22\n$17.95\n\n\ngrp_a\ncoconut\n33.33\n$1.39\n\n\ngrp_a\ndurian\n444.40\n$65,100.00\n\n\ngrp_b\nNA\n5,550.00\n$1,325.81\n\n\ngrp_b\nfig\nNA\n$13.26\n\n\ngrp_b\ngrapefruit\n777,000.00\nNA\n\n\ngrp_b\nhoneydew\n8,880,000.00\n$0.44\n\n\n\n\n\n\nColumn Width\n\nWe choose which columns get specific widths. This can be in units of pixels (easily set by use of the px() helper function), or, as percentages (where the pct() helper function is useful).\n\n\ncountrypops %>%\n  dplyr::select(-contains(\"code\")) %>%\n  dplyr::filter(country_name == \"Mongolia\") %>%\n  tail(5) %>%\n  gt() %>% \n  cols_width(\n    vars(country_name) ~ px(200),\n    vars(year) ~ px(50),\n    vars(population) ~ px(100)\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n\n\n\n\ncountry_name\n      year\n      population\n    \n\n\nMongolia\n2013\n2869107\n\n\nMongolia\n2014\n2923896\n\n\nMongolia\n2015\n2976877\n\n\nMongolia\n2016\n3027398\n\n\nMongolia\n2017\n3075647\n\n\n\n\n\n\nChange all columns\nYou can use the everything() function to affect all columns (or remaining columns).\n\nmtcars %>% \n  tibble::rownames_to_column(\"names\") %>% \n  head(8) %>%\n  gt() %>% \n  cols_width(\n    vars(names) ~ px(150),\n    everything() ~ px(60)\n  ) %>% \n  opt_table_lines()\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnames\n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\n\n\n\n\nMove columns\nYou can move columns to the beginning, end, or arbitrary locations.\nTo start\n\ncountrypops %>% \n  dplyr::select(country_name, year:population) %>% \n  tail(8) %>% \n  gt() %>% \n  cols_move_to_start(vars(year))\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nyear\n      country_name\n      population\n    \n\n\n2010\nZimbabwe\n14086317\n\n\n2011\nZimbabwe\n14386649\n\n\n2012\nZimbabwe\n14710826\n\n\n2013\nZimbabwe\n15054506\n\n\n2014\nZimbabwe\n15411675\n\n\n2015\nZimbabwe\n15777451\n\n\n2016\nZimbabwe\n16150362\n\n\n2017\nZimbabwe\n16529904\n\n\n\n\n\n\nTo end\n\ncountrypops %>% \n  dplyr::select(country_name, year:population) %>% \n  tail(8) %>% \n  gt() %>% \n  cols_move_to_end(vars(year))\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncountry_name\n      population\n      year\n    \n\n\nZimbabwe\n14086317\n2010\n\n\nZimbabwe\n14386649\n2011\n\n\nZimbabwe\n14710826\n2012\n\n\nZimbabwe\n15054506\n2013\n\n\nZimbabwe\n15411675\n2014\n\n\nZimbabwe\n15777451\n2015\n\n\nZimbabwe\n16150362\n2016\n\n\nZimbabwe\n16529904\n2017\n\n\n\n\n\n\nWherever you want\n\ncountrypops %>% \n  dplyr::select(country_name, year:population) %>% \n  tail(8) %>% \n  gt() %>% \n  cols_move(\n    columns = vars(country_name),\n    after = vars(year)\n    )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nyear\n      country_name\n      population\n    \n\n\n2010\nZimbabwe\n14086317\n\n\n2011\nZimbabwe\n14386649\n\n\n2012\nZimbabwe\n14710826\n\n\n2013\nZimbabwe\n15054506\n\n\n2014\nZimbabwe\n15411675\n\n\n2015\nZimbabwe\n15777451\n\n\n2016\nZimbabwe\n16150362\n\n\n2017\nZimbabwe\n16529904\n\n\n\n\n\n\nHide columns\nYou can also hide arbitrary columns, but still reference them inside gt.\n\nzim_code <- unique(countrypops$country_code_2) %>% .[length(.)]\ncountrypops %>% \n  tail(8) %>% \n  gt() %>% \n  cols_hide(columns = dplyr::contains(\"code\")) %>% \n  tab_footnote(\n    footnote = paste(\"The country code is\", zim_code),\n    locations = cells_body(\n      columns = vars(country_name),\n      rows = country_code_2 == zim_code\n    )\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncountry_name\n      year\n      population\n    \n\n\nZimbabwe1\n\n2010\n14086317\n\n\nZimbabwe1\n\n2011\n14386649\n\n\nZimbabwe1\n\n2012\n14710826\n\n\nZimbabwe1\n\n2013\n15054506\n\n\nZimbabwe1\n\n2014\n15411675\n\n\nZimbabwe1\n\n2015\n15777451\n\n\nZimbabwe1\n\n2016\n16150362\n\n\nZimbabwe1\n\n2017\n16529904\n\n\n\n\n1 The country code is ZW\n    \n\n\n\n\nMerge columns\nColumns can be merged with glue-like syntax.\n\nsp500 %>%\n  dplyr::slice(50:55) %>%\n  dplyr::select(-volume, -adj_close) %>%\n  gt() %>%\n  cols_merge(\n    columns = vars(open, close),\n    hide_columns = vars(close),\n    pattern = \"{1}&mdash;{2}\"\n  ) %>%\n  cols_merge(\n    columns = vars(low, high),\n    hide_columns = vars(high),\n    pattern = \"{1}&mdash;{2}\"\n  ) %>%\n  cols_label(\n    open = \"open/close\",\n    low = \"low/high\"\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ndate\n      open/close\n      low/high\n    \n\n\n2015-10-21\n2033.47—2018.94\n2017.22—2037.97\n\n\n2015-10-20\n2033.13—2030.77\n2026.61—2039.12\n\n\n2015-10-19\n2031.73—2033.66\n2022.31—2034.45\n\n\n2015-10-16\n2024.37—2033.11\n2020.46—2033.54\n\n\n2015-10-15\n1996.47—2023.86\n1996.47—2024.15\n\n\n2015-10-14\n2003.66—1994.24\n1990.73—2009.56"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#table-customization",
    "href": "static/resources/gt-cookbook.html#table-customization",
    "title": "gt cookbook",
    "section": "Table Customization",
    "text": "Table Customization\nYou can customize table “theme” using several options, which can all be combined:\nBordered\n\nhead(mtcars) %>% \n  gt() %>% \n  opt_table_lines(\"all\")\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nBorderless\n\nhead(mtcars) %>% \n  gt() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nOutlined\n\nhead(mtcars) %>% \n  gt() %>% \n  opt_table_outline()\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nStriped\n\nhead(mtcars) %>% \n  gt() %>% \n  opt_row_striping()\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nAdd dividers\nYou can specify locations to add borders/dividers and control the weight/color/side of the border.\n\nhead(mtcars) %>% \n  gt() %>% \n  tab_style(\n    style = cell_borders(sides = \"right\", color = \"black\", \n                         style = \"dashed\", weight = px(3)),\n    locations = cells_body(\n      columns = vars(cyl)\n    )\n  ) %>% \n  tab_style(\n    style = cell_borders(sides = \"bottom\", color = \"black\", weight = px(3)),\n    locations = cells_column_labels(everything())\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nYou can also include locations outside of the cell body, ie the column labels or other locations.\n\nhead(mtcars) %>% \n  dplyr::select(cyl, everything()) %>% \n  gt() %>% \n  opt_table_lines(\"none\") %>% \n  opt_row_striping() %>% \n  tab_style(\n    style = cell_borders(sides = \"right\", color = \"black\", weight = px(3)),\n    locations = cells_body(\n      columns = vars(cyl)\n    )\n  ) %>% \n  tab_style(\n    style = cell_borders(sides = c(\"top\", \"bottom\"), \n                         color = \"black\", weight = px(3)),\n    locations = cells_column_labels(everything())\n  ) %>% \n  tab_style(\n    style = cell_borders(sides = \"bottom\", color = \"black\", weight = px(3)),\n    locations = cells_body(rows = 6)\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncyl\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n6\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n4\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n6\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n8\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n6\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nAdjust fonts\nYou can use system fonts or bring in Google fonts with google_font().\n\n# change font for entire table\nhead(mtcars) %>% \n  dplyr::select(cyl, everything()) %>% \n  gt() %>% \n  opt_table_font(font = google_font(\"Fira Mono\"))\n\n\n\n\n\ncyl\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n6\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n4\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n6\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n8\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n6\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\nFonts by location\nAdjusting font by location can be done via tab_style().\n\nhead(mtcars) %>% \n  dplyr::select(cyl, everything()) %>% \n  gt() %>% \n  # change cell body font\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Fira Mono\"), size = px(14)),\n    locations = cells_body(columns = everything())\n  ) %>% \n  # change column labels\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Indie Flower\"), \n      weight = \"bold\",\n      size = px(30)\n      ),\n    locations = cells_column_labels(everything())\n  )\n\n\n\n\n\n\ncyl\n      mpg\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n6\n21.0\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n6\n21.0\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n4\n22.8\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n6\n21.4\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n8\n18.7\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n6\n18.1\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\nAnd the changes can be made outside of just the body of the table, for example the title/header.\n\ncountrypops %>%\n  dplyr::select(-contains(\"code\")) %>%\n  tail(5) %>%\n  gt() %>% \n  tab_style(\n    style = cell_text(font = google_font(\"Fira Mono\")),\n    locations = cells_body(columns = vars(year, population))\n  ) %>% \n  tab_style(\n    style = cell_text(font = google_font(\"Raleway\"), weight = \"bold\"),\n    locations = cells_body(columns = vars(country_name))\n  ) %>% \n  tab_style(\n    style = cell_text(\n      font = google_font(\"Indie Flower\"), \n      weight = \"bold\", \n      align = \"left\",\n      size = px(40)\n      ),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_header(\"Population changes\")\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nPopulation changes\n    \n\ncountry_name\n      year\n      population\n    \n\n\nZimbabwe\n2013\n15054506\n\n\nZimbabwe\n2014\n15411675\n\n\nZimbabwe\n2015\n15777451\n\n\nZimbabwe\n2016\n16150362\n\n\nZimbabwe\n2017\n16529904\n\n\n\n\n\n\nTable options\n\nModify the options available in a table. These options are named by the components, the subcomponents, and the element that can adjusted.\n\nThis is where the bulk of theme-changes can be done. tab_options has dozens of different table components that can be adjusted. The full details can be found in the {gt} documentation. You can customize all sorts of arbitrary components based globally.\n\nhead(mtcars) %>% \n  gt() %>% \n  tab_options(\n    table.background.color = \"black\",\n    column_labels.background.color = \"grey\",\n    column_labels.font.size = px(16),\n    table.font.size = px(12),\n    data_row.padding = px(4),\n    table.width = px(250)\n  )\n\n\n\n\n\n\nmpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1"
  },
  {
    "objectID": "static/resources/gt-cookbook.html#conditional-formatting",
    "href": "static/resources/gt-cookbook.html#conditional-formatting",
    "title": "gt cookbook",
    "section": "Conditional formatting",
    "text": "Conditional formatting\nColor scales\nTo add color scales, you can use R’s built-in color utilities (or other color manipulation packages like {paletteer}):\nConditional coloring\n\nIt’s possible to add color to data cells according to their values. The data_color() function colors all rows of any columns supplied. There are two ways to define how cells are colored: (1) through the use of a supplied color palette, and (2) through use of a color mapping function available from the {scales} package. The first method colorizes cell data according to whether values are character or numeric. The second method provides more control over how cells are colored since we provide an explicit color function and thus other requirements such as bin counts, cut points, or a numeric domain.\n\n\ncountrypops %>%\n  dplyr::filter(country_name == \"Mongolia\") %>%\n  dplyr::select(-contains(\"code\")) %>%\n  tail(10) %>%\n  gt() %>%\n  data_color(\n    columns = vars(population),\n    colors = scales::col_numeric(\n      palette = c(\n        \"white\", \"orange\", \"red\"),\n      domain = NULL)\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\ncountry_name\n      year\n      population\n    \n\n\nMongolia\n2008\n2628131\n\n\nMongolia\n2009\n2668289\n\n\nMongolia\n2010\n2712650\n\n\nMongolia\n2011\n2761516\n\n\nMongolia\n2012\n2814226\n\n\nMongolia\n2013\n2869107\n\n\nMongolia\n2014\n2923896\n\n\nMongolia\n2015\n2976877\n\n\nMongolia\n2016\n3027398\n\n\nMongolia\n2017\n3075647\n\n\n\n\n\n\n\nFactors\nFactors are typically more appropriate with qualitative palettes, and we can use scales::col_factor() to apply colors to the specific column of interest. Note that the color palette needs to be equal to the unique number of factors. In the example below we pass n = 3 since we have 3 different trim types.\n\ngtcars %>% \n  dplyr::filter(mfr == \"Ferrari\", hp < 900) %>% \n  dplyr::select(model, hp, trim, mpg_h, msrp) %>% \n  gt() %>% \n  data_color(\n    columns = vars(trim),\n    colors = scales::col_factor(\n      palette = paletteer::paletteer_d(\n        n = 3, palette = \"colorblindr::OkabeIto\"\n        ) %>% as.character(),\n      domain = NULL\n      )\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmodel\n      hp\n      trim\n      mpg_h\n      msrp\n    \n\n\n458 Speciale\n597\nBase Coupe\n17\n291744\n\n\n458 Spider\n562\nBase\n17\n263553\n\n\n458 Italia\n562\nBase Coupe\n17\n233509\n\n\n488 GTB\n661\nBase Coupe\n22\n245400\n\n\nCalifornia\n553\nBase Convertible\n23\n198973\n\n\nGTC4Lusso\n680\nBase Coupe\n17\n298000\n\n\nFF\n652\nBase Coupe\n16\n295000\n\n\nF12Berlinetta\n731\nBase Coupe\n16\n319995\n\n\n\n\n\n\n\nMultiple columns\nThis can also be applied across multiple columns at once. Here’s an example using the built in nottem dataset. While red-green color scales are very commonly used, they are not color-blind friendly.\nWe can alternatively use something like red-white-blue, or purple-white-green.\n\ndimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb)\ntemps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames) %>% \n  data.frame() %>% \n  tibble::rownames_to_column() %>% \n  head(10)\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(month.abb),\n    colors = scales::col_numeric(\n      c(\"#63be7b\", \"#ffeb84\", \"#f87274\"), \n      domain = range(nottem))\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\nNote: Using an external vector in selections is ambiguous.\nℹ Use `all_of(month.abb)` instead of `month.abb` to silence this message.\nℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\nThis message is displayed once per session.\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\n“Hulk” Colors\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(month.abb),\n    colors = scales::col_numeric(\n      colorspace::diverge_hcl(n = 9, palette = \"Purple-Green\") %>% rev(), \n      domain = range(nottem))\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nRed blue palette\n\ntemps %>% \n  gt() %>% \n  data_color(\n    columns = vars(month.abb),\n    colors = scales::col_numeric(\n      colorspace::diverge_hcl(n = 9, palette = \"Blue-Red 3\"), \n      domain = range(nottem))\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n    \n\n\n1920\n40.6\n40.8\n44.4\n46.7\n54.1\n58.5\n57.7\n56.4\n54.3\n50.5\n42.9\n39.8\n\n\n1921\n44.2\n39.8\n45.1\n47.0\n54.1\n58.7\n66.3\n59.9\n57.0\n54.2\n39.7\n42.8\n\n\n1922\n37.5\n38.7\n39.5\n42.1\n55.7\n57.8\n56.8\n54.3\n54.3\n47.1\n41.8\n41.7\n\n\n1923\n41.8\n40.1\n42.9\n45.8\n49.2\n52.7\n64.2\n59.6\n54.4\n49.2\n36.3\n37.6\n\n\n1924\n39.3\n37.5\n38.3\n45.5\n53.2\n57.7\n60.8\n58.2\n56.4\n49.8\n44.4\n43.6\n\n\n1925\n40.0\n40.5\n40.8\n45.1\n53.8\n59.4\n63.5\n61.0\n53.0\n50.0\n38.1\n36.3\n\n\n1926\n39.2\n43.4\n43.4\n48.9\n50.6\n56.8\n62.5\n62.0\n57.5\n46.7\n41.6\n39.8\n\n\n1927\n39.4\n38.5\n45.3\n47.1\n51.7\n55.0\n60.4\n60.5\n54.7\n50.3\n42.3\n35.2\n\n\n1928\n40.8\n41.1\n42.8\n47.3\n50.9\n56.4\n62.2\n60.5\n55.4\n50.2\n43.0\n37.3\n\n\n1929\n34.8\n31.3\n41.0\n43.9\n53.1\n56.9\n62.5\n60.3\n59.8\n49.2\n42.9\n41.9\n\n\n\n\n\n\nMultiple colors\nMultiple calls to data_color() can provide different color palettes or ranges.\n\ngtcars %>% \n  dplyr::filter(mfr == \"Ferrari\", hp < 900) %>% \n  dplyr::select(model, hp, mpg_c, mpg_h, msrp) %>% \n  gt() %>% \n  data_color(\n    columns = vars(hp),\n    colors = scales::col_numeric(\n      palette = c(\n        \"white\", \"orange\", \"red\"),\n      domain = c(500, 750))\n  ) %>% \n  data_color(\n    columns = vars(mpg_c, mpg_h),\n    colors = scales::col_numeric(\n      palette = c(\n        \"white\", \"green\"),\n      domain = c(10, 25))\n  ) %>% \n  data_color(\n    columns = vars(msrp),\n    colors = scales::col_numeric(\n      palette = c(\n        \"white\", \"pink\", \"red\"),\n      domain = NULL)\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\nmodel\n      hp\n      mpg_c\n      mpg_h\n      msrp\n    \n\n\n458 Speciale\n597\n13\n17\n291744\n\n\n458 Spider\n562\n13\n17\n263553\n\n\n458 Italia\n562\n13\n17\n233509\n\n\n488 GTB\n661\n15\n22\n245400\n\n\nCalifornia\n553\n16\n23\n198973\n\n\nGTC4Lusso\n680\n12\n17\n298000\n\n\nFF\n652\n11\n16\n295000\n\n\nF12Berlinetta\n731\n11\n16\n319995\n\n\n\n\n\n\n\n{paleteer} palettes\nTo make this process easier we can elect to use the {paletteer} package, which makes a wide range of palettes from various R packages readily available.\n\npizzaplace %>%\n  dplyr::filter(\n    type %in% c(\"chicken\", \"supreme\")) %>%\n  dplyr::group_by(type, size) %>%\n  dplyr::summarize(\n    sold = dplyr::n(),\n    income = sum(price)\n  ) %>%\n  gt(rowname_col = \"size\") %>%\n  data_color(\n    columns = vars(sold, income),\n    colors = scales::col_numeric(\n      palette = paletteer::paletteer_d(\n        palette = \"ggsci::red_material\"\n        ) %>% as.character(),\n      domain = NULL\n      )\n  )\n\n`summarise()` has grouped output by 'type'. You can override using the\n`.groups` argument.\n\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      sold\n      income\n    \n\n\nchicken\n    \n\nL\n4932\n102339.0\n\n\nM\n3894\n65224.5\n\n\nS\n2224\n28356.0\n\n\nsupreme\n    \n\nL\n4564\n94258.5\n\n\nM\n4046\n66475.0\n\n\nS\n3377\n47463.5\n\n\n\n\n\n\nColor Palette functions\nWhile you can manually call outputs to scales::col_numeric(), you can also build a palette function. Note that the palette can be manually created or pulled from a metapackage like colorspace or paletteer.\n\nmy_color_pal <- function(x) {\n  scales::col_numeric(\n    palette = paletteer::paletteer_d(\n      palette = \"ggsci::red_material\"\n    ) %>% as.character(),\n    domain = NULL\n  )(x)\n}\n\npizzaplace %>%\n  dplyr::filter(\n    type %in% c(\"chicken\", \"supreme\")) %>%\n  dplyr::group_by(type, size) %>%\n  dplyr::summarize(\n    sold = dplyr::n(),\n    income = sum(price), .groups = \"drop\"\n  ) %>%\n  gt(rowname_col = \"size\") %>%\n  data_color(\n    columns = vars(sold, income),\n    colors = my_color_pal\n  )\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\n\n\n\n\n\n\n\n      type\n      sold\n      income\n    \n\n\nL\nchicken\n4932\n102339.0\n\n\nM\nchicken\n3894\n65224.5\n\n\nS\nchicken\n2224\n28356.0\n\n\nL\nsupreme\n4564\n94258.5\n\n\nM\nsupreme\n4046\n66475.0\n\n\nS\nsupreme\n3377\n47463.5"
  },
  {
    "objectID": "static/resources/nflseedr.html",
    "href": "static/resources/nflseedr.html",
    "title": "{nflseedR} table",
    "section": "",
    "text": "2020 NFL Simulations\nTeam points simulated based off team QBR (QuarterBack Rating) via {nflseedR}\n\n\n\nSimulation by @thomas_mock via 1,000 {nflseedR} simulated games"
  },
  {
    "objectID": "static/resources/resources.html",
    "href": "static/resources/resources.html",
    "title": " ",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\n\n\n\n100 Women - BBC\n\n\nAn interactive {reactable} table based off the 100 women of 2020\n\n\n\n\ngt cookbook\n\n\nA cookbook of core examples with extending {gt}\n\n\n\n\ngt cookbook - advanced\n\n\nA cookbook of advanced examples with extending {gt}\n\n\n\n\n{nflseedR} table\n\n\nAn interactive {reactable} table with {nflseedR} data, styled like FiveThirtyEight\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "static/resources/resources.html#presentations",
    "href": "static/resources/resources.html#presentations",
    "title": " ",
    "section": "Presentations",
    "text": "Presentations"
  }
]